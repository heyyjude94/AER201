Disassembly Listing for Interface16
Generated From:
/Users/Judy/MPLABXProjects/Interface16.X/dist/default/production/Interface16.X.production.cof
Apr 4, 2014 4:50:33 PM

---  /Users/Judy/MPLABXProjects/Interface16.X/main.asm  -------------------------------------------------
                                                  1:     ;*******************************************************************
                                                  2:     ; User Interface
                                                  3:     ; Assembler : mpasm.exe
                                                  4:     ; Linker    : mplink.exe
                                                  5:     ; Written By : Judy Shen
                                                  6:     ;*******************************************************************
                                                  7:     
                                                  8:           list p=16f877                 ; list directive to define processor
                                                  9:           #include <p16f877.inc>        ; processor specific variable definitions
                                                  10:          #include <LCD.inc>
                                                  11:          #include <rtc_macros.inc>
                                                  12:          __CONFIG _CP_OFF & _WDT_OFF & _BODEN_ON & _PWRTE_ON & _HS_OSC & _WRT_ENABLE_ON & _CPD_OFF & _LVP_OFF
                                                  13:    
                                                  14:    	cblock	0x20
                                                  15:    		COUNTH ;0x20
                                                  16:    		COUNTM ;0x21
                                                  17:    		COUNTL ;0x22
                                                  18:    		Table_Counter ;0x23
                                                  19:    		lcd_tmp ;0x24
                                                  20:            key_temp ;0x25
                                                  21:            test ;0x26
                                                  22:            rtc1 ;0x27
                                                  23:            rtc2 ;0x28
                                                  24:            com ;0x29
                                                  25:            dat ;0x2a
                                                  26:            lcd_d1 ;0x2b
                                                  27:            lcd_d2 ;0x2c
                                                  28:            bcd ;0x2d
                                                  29:            count ;0x2e
                                                  30:            show_data ;02f
                                                  31:            w_temp ;0x30
                                                  32:            status_temp ;0x31
                                                  33:            pass ;0x32
                                                  34:            flickerfail ;0x33
                                                  35:            ledfail ;0x34
                                                  36:            runtime ;0x35
                                                  37:            timercount ;0x36
                                                  38:            ones ;0x37
                                                  39:            tens ;0x38
                                                  40:            huns ;0x39
                                                  41:            count_temp ;0x3a
                                                  42:            run_temp ;0x3b
                                                  43:            ADDRL ;0x3c
                                                  44:            DATAL ;0x3d
                                                  45:            VALUEL ;0x3e
                                                  46:            signal ;0x3f
                                                  47:            none ;0x40
                                                  48:            light1 ;0x41
                                                  49:            light2 ;0x42
                                                  50:            light3 ;0x43
                                                  51:            light4 ;0x44
                                                  52:            light5 ;0x45
                                                  53:            light6 ;0x46
                                                  54:            light7 ;0x47
                                                  55:            light8 ;0x48
                                                  56:            light9 ;0x49
                                                  57:            result_temp;0x4a
                                                  58:            passT  ;0x4b
                                                  59:            flickerfailT ;0x4c
                                                  60:            ledfailT    ;0x4d
                                                  61:            noneT       ;0x4e
                                                  62:            val
                                                  63:    
                                                  64:    
                                                  65:    	endc
                                                  66:    
                                                  67:    	;Declare constants for pin assignments (LCD on PORTD)
                                                  68:    
                                                  69:    		#define	RS 	PORTD,2
                                                  70:    		#define	E 	PORTD,3
                                                  71:    
                                                  72:            ORG       0x0000     ;RESET vector must always be at 0x00
0000  018A     CLRF PCLATH                        73:            clrf PCLATH
0001  2805     GOTO 0x5                           74:            goto      init       ;Just jump to the main code section.
                                                  75:    
                                                  76:            ORG 0x004
0004  2D6E     GOTO 0x56E                         77:            goto ISR
                                                  78:    init
                                                  79:             ;initialize timer interrupt
0005  178B     BSF INTCON, 0x7                    80:             bsf    INTCON, GIE
0006  1683     BSF STATUS, 0x5                    81:             banksel    OPTION_REG
0007  1303     BCF STATUS, 0x6
0008  0181     CLRF TMR0                          82:             clrf       TMR0
0009  30C7     MOVLW 0xC7                         83:             movlw      B'11000111'
000A  0081     MOVWF TMR0                         84:             movwf      OPTION_REG
                                                  85:    
000B  1283     BCF STATUS, 0x5                    86:             bcf        STATUS, RP0
                                                  87:    
                                                  88:             ;init timer
000C  3026     MOVLW 0x26                         89:             movlw      D'38'
000D  00B6     MOVWF 0x36                         90:             movwf      timercount
000E  01B5     CLRF 0x35                          91:             clrf       runtime
                                                  92:    
000F  1683     BSF STATUS, 0x5                    93:             bsf       STATUS,RP0     ; select bank 1
0010  0185     CLRF PORTA                         94:             clrf      TRISA
0011  1605     BSF PORTA, 0x4                     95:             bsf       TRISA, 4
0012  30F3     MOVLW 0xF3                         96:             movlw     b'11110011'    ; Set required keypad inputs
0013  0086     MOVWF PORTB                        97:             movwf     TRISB
0014  0187     CLRF PORTC                         98:             clrf      TRISC          ; All port C is output
0015  0188     CLRF PORTD                         99:             clrf      TRISD          ; All port D is output
                                                  100:   
                                                  101:   
                                                  102:   
                                                  103:            ;Set SDA and SCL to high-Z first as required for I2C
0016  1607     BSF PORTC, 0x4                     104:   		 bsf	   TRISC,4
0017  1587     BSF PORTC, 0x3                     105:   		 bsf	   TRISC,3
                                                  106:   
0018  1283     BCF STATUS, 0x5                    107:            bcf       STATUS,RP0     ; select bank 0
0019  0185     CLRF PORTA                         108:            clrf      PORTA
001A  0186     CLRF PORTB                         109:            clrf      PORTB
001B  0187     CLRF PORTC                         110:            clrf      PORTC
001C  0188     CLRF PORTD                         111:            clrf      PORTD
001D  26C4     CALL 0x6C4                         112:   		 call 	   i2c_common_setup
                                                  113:   
                                                  114:   
001E  20D7     CALL 0xD7                          115:            call      InitLCD    ;Initialize the LCD (code in lcd.asm; imported by lcd.inc)
                                                  116:   
                                                  117:            ;init RS232
001F  2617     CALL 0x617                         118:            call      pc_init
                                                  119:   
                                                  120:            ; init EEPROM
0020  3010     MOVLW 0x10                         121:            movlw    0x10
0021  00BC     MOVWF 0x3C                         122:            movwf    ADDRL
0022  01BD     CLRF 0x3D                          123:            clrf     DATAL
0023  01BE     CLRF 0x3E                          124:            clrf     VALUEL
                                                  125:   
                                                  126:   
                                                  127:   
                                                  128:   ;MAIN PROGRAM
                                                  129:   ;***************************************
0024  01A3     CLRF 0x23                          130:   Main	Display		Welcome_Msg
0025  0103     CLRW
0026  0823     MOVF 0x23, W
0027  2045     CALL 0x45
0028  3A00     XORLW 0x0
0029  1903     BTFSC STATUS, 0x2
002A  282E     GOTO 0x2E
002B  24DA     CALL 0x4DA
002C  0AA3     INCF 0x23, F
002D  2826     GOTO 0x26
002E  249B     CALL 0x49B                         131:           call        HalfS
002F  249B     CALL 0x49B                         132:           call        HalfS
0030  249B     CALL 0x49B                         133:           call        HalfS
0031  20D4     CALL 0xD4                          134:           call        Clear_Display
                                                  135:   
                                                  136:   Start_Test
0032  01A3     CLRF 0x23                          137:      		Display		Menu
0033  0103     CLRW
0034  0823     MOVF 0x23, W
0035  2057     CALL 0x57
0036  3A00     XORLW 0x0
0037  1903     BTFSC STATUS, 0x2
0038  283C     GOTO 0x3C
0039  24DA     CALL 0x4DA
003A  0AA3     INCF 0x23, F
003B  2834     GOTO 0x34
                                                  138:   
003C  3018     MOVLW 0x18                         139:   Test     movlw		b'00011000'		;Move to the left
003D  24CB     CALL 0x4CB                         140:            call		WR_INS
003E  249B     CALL 0x49B                         141:            call		HalfS    ;Wait until data is available from the keypad
003F  1C86     BTFSS PORTB, 0x1                   142:            btfss		PORTB,1
0040  283C     GOTO 0x3C                          143:            goto		Test
                                                  144:   
                                                  145:   
0041  0E06     SWAPF PORTB, W                     146:            swapf		PORTB,W     ;Read PortB<7:4> into W<3:0>
0042  390F     ANDLW 0xF                          147:            andlw		0x0F
0043  20F5     CALL 0xF5                          148:            call       check
0044  2832     GOTO 0x32                          149:            goto       Start_Test
                                                  150:   
                                                  151:   ; Look up table
                                                  152:   ;***************************************
                                                  153:   
                                                  154:   Welcome_Msg
0045  0782     ADDWF PCL, F                       155:   		addwf	PCL,F
0046  3457     RETLW 0x57                         156:   		dt		"Welcome!", 0
0047  3465     RETLW 0x65
0048  346C     RETLW 0x6C
0049  3463     RETLW 0x63
004A  346F     RETLW 0x6F
004B  346D     RETLW 0x6D
004C  3465     RETLW 0x65
004D  3421     RETLW 0x21
004E  3400     RETLW 0x0
                                                  157:   
                                                  158:   Paused
004F  0782     ADDWF PCL, F                       159:   		addwf	PCL,F
0050  3450     RETLW 0x50                         160:   		dt		"Paused", 0
0051  3461     RETLW 0x61
0052  3475     RETLW 0x75
0053  3473     RETLW 0x73
0054  3465     RETLW 0x65
0055  3464     RETLW 0x64
0056  3400     RETLW 0x0
                                                  161:   
                                                  162:   Menu
0057  0782     ADDWF PCL, F                       163:   		addwf	PCL,F
0058  3441     RETLW 0x41                         164:   		dt		"A:Start, ", "B:PLog, ", "C:Time",0
0059  343A     RETLW 0x3A
005A  3453     RETLW 0x53
005B  3474     RETLW 0x74
005C  3461     RETLW 0x61
005D  3472     RETLW 0x72
005E  3474     RETLW 0x74
005F  342C     RETLW 0x2C
0060  3420     RETLW 0x20
0061  3442     RETLW 0x42
0062  343A     RETLW 0x3A
0063  3450     RETLW 0x50
0064  344C     RETLW 0x4C
0065  346F     RETLW 0x6F
0066  3467     RETLW 0x67
0067  342C     RETLW 0x2C
0068  3420     RETLW 0x20
0069  3443     RETLW 0x43
006A  343A     RETLW 0x3A
006B  3454     RETLW 0x54
006C  3469     RETLW 0x69
006D  346D     RETLW 0x6D
006E  3465     RETLW 0x65
006F  3400     RETLW 0x0
                                                  165:   
                                                  166:   Run
0070  0782     ADDWF PCL, F                       167:   		addwf	PCL,F
0071  3454     RETLW 0x54                         168:   		dt		"Testing Candles", 0
0072  3465     RETLW 0x65
0073  3473     RETLW 0x73
0074  3474     RETLW 0x74
0075  3469     RETLW 0x69
0076  346E     RETLW 0x6E
0077  3467     RETLW 0x67
0078  3420     RETLW 0x20
0079  3443     RETLW 0x43
007A  3461     RETLW 0x61
007B  346E     RETLW 0x6E
007C  3464     RETLW 0x64
007D  346C     RETLW 0x6C
007E  3465     RETLW 0x65
007F  3473     RETLW 0x73
0080  3400     RETLW 0x0
                                                  169:   
                                                  170:   Done
0081  0782     ADDWF PCL, F                       171:   		addwf	PCL,F
0082  3446     RETLW 0x46                         172:   		dt		"Finished Testing", 0
0083  3469     RETLW 0x69
0084  346E     RETLW 0x6E
0085  3469     RETLW 0x69
0086  3473     RETLW 0x73
0087  3468     RETLW 0x68
0088  3465     RETLW 0x65
0089  3464     RETLW 0x64
008A  3420     RETLW 0x20
008B  3454     RETLW 0x54
008C  3465     RETLW 0x65
008D  3473     RETLW 0x73
008E  3474     RETLW 0x74
008F  3469     RETLW 0x69
0090  346E     RETLW 0x6E
0091  3467     RETLW 0x67
0092  3400     RETLW 0x0
                                                  173:   
                                                  174:   Runtime
0093  0782     ADDWF PCL, F                       175:   		addwf	PCL,F
0094  3452     RETLW 0x52                         176:   		dt		"Runtime: ", 0
0095  3475     RETLW 0x75
0096  346E     RETLW 0x6E
0097  3474     RETLW 0x74
0098  3469     RETLW 0x69
0099  346D     RETLW 0x6D
009A  3465     RETLW 0x65
009B  343A     RETLW 0x3A
009C  3420     RETLW 0x20
009D  3400     RETLW 0x0
                                                  177:   
                                                  178:   PMem
009E  0782     ADDWF PCL, F                       179:   		addwf	PCL,F
009F  3450     RETLW 0x50                         180:   		dt		"Permanent Log", 0
00A0  3465     RETLW 0x65
00A1  3472     RETLW 0x72
00A2  346D     RETLW 0x6D
00A3  3461     RETLW 0x61
00A4  346E     RETLW 0x6E
00A5  3465     RETLW 0x65
00A6  346E     RETLW 0x6E
00A7  3474     RETLW 0x74
00A8  3420     RETLW 0x20
00A9  344C     RETLW 0x4C
00AA  346F     RETLW 0x6F
00AB  3467     RETLW 0x67
00AC  3400     RETLW 0x0
                                                  181:   PMenu
00AD  0782     ADDWF PCL, F                       182:           addwf   PCL, F
00AE  3453     RETLW 0x53                         183:           dt      "Select Trial", 0
00AF  3465     RETLW 0x65
00B0  346C     RETLW 0x6C
00B1  3465     RETLW 0x65
00B2  3463     RETLW 0x63
00B3  3474     RETLW 0x74
00B4  3420     RETLW 0x20
00B5  3454     RETLW 0x54
00B6  3472     RETLW 0x72
00B7  3469     RETLW 0x69
00B8  3461     RETLW 0x61
00B9  346C     RETLW 0x6C
00BA  3400     RETLW 0x0
                                                  184:   
                                                  185:   RTC
00BB  0782     ADDWF PCL, F                       186:   		addwf	PCL,F
00BC  3454     RETLW 0x54                         187:   		dt		"Time:", 0
00BD  3469     RETLW 0x69
00BE  346D     RETLW 0x6D
00BF  3465     RETLW 0x65
00C0  343A     RETLW 0x3A
00C1  3400     RETLW 0x0
                                                  188:   
                                                  189:   Trial
00C2  0782     ADDWF PCL, F                       190:           addwf   PCL, F
00C3  3450     RETLW 0x50                         191:           dt      "P: FF: LF: N:", 0
00C4  343A     RETLW 0x3A
00C5  3420     RETLW 0x20
00C6  3446     RETLW 0x46
00C7  3446     RETLW 0x46
00C8  343A     RETLW 0x3A
00C9  3420     RETLW 0x20
00CA  344C     RETLW 0x4C
00CB  3446     RETLW 0x46
00CC  343A     RETLW 0x3A
00CD  3420     RETLW 0x20
00CE  344E     RETLW 0x4E
00CF  343A     RETLW 0x3A
00D0  3400     RETLW 0x0
                                                  192:   
                                                  193:   
                                                  194:   ;***************************************
                                                  195:   ; Helper Subrountines
                                                  196:   ;***************************************
                                                  197:   
                                                  198:   Switch_Lines
00D1  30C0     MOVLW 0xC0                         199:   		movlw	B'11000000'
00D2  24CB     CALL 0x4CB                         200:   		call	WR_INS
00D3  0008     RETURN                             201:   		return
                                                  202:   
                                                  203:   Clear_Display
00D4  3001     MOVLW 0x1                          204:   		movlw	B'00000001'
00D5  24CB     CALL 0x4CB                         205:   		call	WR_INS
00D6  0008     RETURN                             206:   		return
                                                  207:   
                                                  208:   InitLCD
00D7  1283     BCF STATUS, 0x5                    209:   	bcf STATUS,RP0
00D8  1588     BSF PORTD, 0x3                     210:   	bsf E     ;E default high
                                                  211:   
                                                  212:   	;Wait for LCD POR to finish (~15ms)
00D9  2565     CALL 0x565                         213:   	call lcdLongDelay
00DA  2565     CALL 0x565                         214:   	call lcdLongDelay
00DB  2565     CALL 0x565                         215:   	call lcdLongDelay
                                                  216:   
                                                  217:   	;Ensure 8-bit mode first (no way to immediately guarantee 4-bit mode)
                                                  218:   	; -> Send b'0011' 3 times
00DC  3033     MOVLW 0x33                         219:   	movlw	b'00110011'
00DD  24CB     CALL 0x4CB                         220:   	call	WR_INS
00DE  2565     CALL 0x565                         221:   	call lcdLongDelay
00DF  2565     CALL 0x565                         222:   	call lcdLongDelay
00E0  3032     MOVLW 0x32                         223:   	movlw	b'00110010'
00E1  24CB     CALL 0x4CB                         224:   	call	WR_INS
00E2  2565     CALL 0x565                         225:   	call lcdLongDelay
00E3  2565     CALL 0x565                         226:   	call lcdLongDelay
                                                  227:   
                                                  228:   	; 4 bits, 2 lines, 5x7 dots
00E4  3028     MOVLW 0x28                         229:   	movlw	b'00101000'
00E5  24CB     CALL 0x4CB                         230:   	call	WR_INS
00E6  2565     CALL 0x565                         231:   	call lcdLongDelay
00E7  2565     CALL 0x565                         232:   	call lcdLongDelay
                                                  233:   
                                                  234:   	; display on/off
00E8  300C     MOVLW 0xC                          235:   	movlw	b'00001100'
00E9  24CB     CALL 0x4CB                         236:   	call	WR_INS
00EA  2565     CALL 0x565                         237:   	call lcdLongDelay
00EB  2565     CALL 0x565                         238:   	call lcdLongDelay
                                                  239:   
                                                  240:   	; Entry mode
00EC  3006     MOVLW 0x6                          241:   	movlw	b'00000110'
00ED  24CB     CALL 0x4CB                         242:   	call	WR_INS
00EE  2565     CALL 0x565                         243:   	call lcdLongDelay
00EF  2565     CALL 0x565                         244:   	call lcdLongDelay
                                                  245:   
                                                  246:   	; Clear ram
00F0  3001     MOVLW 0x1                          247:   	movlw	b'00000001'
00F1  24CB     CALL 0x4CB                         248:   	call	WR_INS
00F2  2565     CALL 0x565                         249:   	call lcdLongDelay
00F3  2565     CALL 0x565                         250:   	call lcdLongDelay
00F4  0008     RETURN                             251:   	return
                                                  252:   
                                                  253:   ;helper subroutines
                                                  254:   ;function to check for keyboard input
                                                  255:   check
00F5  00A5     MOVWF 0x25                         256:       movwf key_temp
                                                  257:   
                                                  258:   check_A
00F6  3A03     XORLW 0x3                          259:       xorlw   D'3'
00F7  1D03     BTFSS STATUS, 0x2                  260:       btfss   STATUS, Z
00F8  293B     GOTO 0x13B                         261:           goto    check_B
00F9  20D4     CALL 0xD4                          262:       call Clear_Display
00FA  01A3     CLRF 0x23                          263:       Display Run
00FB  0103     CLRW
00FC  0823     MOVF 0x23, W
00FD  2070     CALL 0x70
00FE  3A00     XORLW 0x0
00FF  1903     BTFSC STATUS, 0x2
0100  2904     GOTO 0x104
0101  24DA     CALL 0x4DA
0102  0AA3     INCF 0x23, F
0103  28FC     GOTO 0xFC
0104  249B     CALL 0x49B                         264:       call    HalfS
0105  247D     CALL 0x47D                         265:       call    Motor_On
0106  168B     BSF INTCON, 0x5                    266:       bsf    INTCON, 5
0107  2162     CALL 0x162                         267:       call    count_down
0108  128B     BCF INTCON, 0x5                    268:       bcf    INTCON, 5
0109  20D4     CALL 0xD4                          269:       call Clear_Display
010A  248E     CALL 0x48E                         270:       call    Motor_Off
                                                  271:   
010B  01A3     CLRF 0x23                          272:       Display Done
010C  0103     CLRW
010D  0823     MOVF 0x23, W
010E  2081     CALL 0x81
010F  3A00     XORLW 0x0
0110  1903     BTFSC STATUS, 0x2
0111  2915     GOTO 0x115
0112  24DA     CALL 0x4DA
0113  0AA3     INCF 0x23, F
0114  290D     GOTO 0x10D
0115  20D1     CALL 0xD1                          273:       call Switch_Lines
0116  01A3     CLRF 0x23                          274:       Display Runtime 
0117  0103     CLRW
0118  0823     MOVF 0x23, W
0119  2093     CALL 0x93
011A  3A00     XORLW 0x0
011B  1903     BTFSC STATUS, 0x2
011C  2920     GOTO 0x120
011D  24DA     CALL 0x4DA
011E  0AA3     INCF 0x23, F
011F  2918     GOTO 0x118
0120  24EB     CALL 0x4EB                         275:       call Convert
0121  01B5     CLRF 0x35                          276:       clrf    runtime
0122  25C8     CALL 0x5C8                         277:       call    shift_EE
                                                  278:       ;writing run info into EEPROM
0123  3010     MOVLW 0x10                         279:       movlw   0x10
0124  00BC     MOVWF 0x3C                         280:       movwf   ADDRL
0125  0832     MOVF 0x32, W                       281:       movf    pass, VALUEL
0126  00BE     MOVWF 0x3E                         282:       movwf   VALUEL
0127  2582     CALL 0x582                         283:       call    write_EE
                                                  284:   
0128  0ABC     INCF 0x3C, F                       285:       incf    ADDRL
0129  0833     MOVF 0x33, W                       286:       movf    flickerfail, VALUEL
012A  00BE     MOVWF 0x3E                         287:       movwf   VALUEL
012B  2582     CALL 0x582                         288:       call    write_EE
012C  0ABC     INCF 0x3C, F                       289:       incf    ADDRL
                                                  290:   
012D  0834     MOVF 0x34, W                       291:       movf    ledfail, VALUEL
012E  00BE     MOVWF 0x3E                         292:       movwf   VALUEL
012F  2582     CALL 0x582                         293:       call    write_EE
0130  0ABC     INCF 0x3C, F                       294:       incf    ADDRL
                                                  295:   
0131  0840     MOVF 0x40, W                       296:       movf    none, VALUEL
0132  00BE     MOVWF 0x3E                         297:       movwf   VALUEL
0133  2582     CALL 0x582                         298:       call    write_EE
0134  2414     CALL 0x414                         299:       call    wait
0135  20D4     CALL 0xD4                          300:       call Clear_Display
                                                  301:       ;can check previous run trials
0136  221A     CALL 0x21A                         302:       call results_access
0137  2635     CALL 0x635                         303:       call pc_log
0138  2414     CALL 0x414                         304:       call wait
                                                  305:   
0139  20D4     CALL 0xD4                          306:       call Clear_Display
013A  0008     RETURN                             307:       return
                                                  308:   
                                                  309:   check_B
013B  0825     MOVF 0x25, W                       310:       movf key_temp, W
013C  3A07     XORLW 0x7                          311:       xorlw D'7'
013D  1D03     BTFSS STATUS, 0x2                  312:       btfss STATUS, Z
013E  2958     GOTO 0x158                         313:           goto check_C
013F  20D4     CALL 0xD4                          314:       call Clear_Display
0140  01A3     CLRF 0x23                          315:       Display PMem
0141  0103     CLRW
0142  0823     MOVF 0x23, W
0143  209E     CALL 0x9E
0144  3A00     XORLW 0x0
0145  1903     BTFSC STATUS, 0x2
0146  294A     GOTO 0x14A
0147  24DA     CALL 0x4DA
0148  0AA3     INCF 0x23, F
0149  2942     GOTO 0x142
014A  20D1     CALL 0xD1                          316:       call Switch_Lines
014B  01A3     CLRF 0x23                          317:       Display PMenu
014C  0103     CLRW
014D  0823     MOVF 0x23, W
014E  20AD     CALL 0xAD
014F  3A00     XORLW 0x0
0150  1903     BTFSC STATUS, 0x2
0151  2955     GOTO 0x155
0152  24DA     CALL 0x4DA
0153  0AA3     INCF 0x23, F
0154  294D     GOTO 0x14D
0155  22CA     CALL 0x2CA                         318:       call pmenu_access
0156  20D4     CALL 0xD4                          319:       call Clear_Display
0157  0008     RETURN                             320:       return
                                                  321:   
                                                  322:   check_C
0158  0825     MOVF 0x25, W                       323:       movf key_temp, W
0159  3A0B     XORLW 0xB                          324:       xorlw D'11'
015A  1D03     BTFSS STATUS, 0x2                  325:       btfss STATUS, Z
015B  2960     GOTO 0x160                         326:           goto Other_wise
015C  20D4     CALL 0xD4                          327:       call Clear_Display
015D  2418     CALL 0x418                         328:       call show_RTC
015E  20D4     CALL 0xD4                          329:       call Clear_Display
015F  0008     RETURN                             330:       return
                                                  331:   
                                                  332:   Other_wise
0160  20D4     CALL 0xD4                          333:       call Clear_Display
0161  0008     RETURN                             334:       return
                                                  335:   
                                                  336:   
                                                  337:   count_down
0162  01AF     CLRF 0x2F                          338:           clrf show_data
0163  01B2     CLRF 0x32                          339:           clrf pass
0164  01B3     CLRF 0x33                          340:           clrf flickerfail
0165  01B4     CLRF 0x34                          341:           clrf ledfail
0166  01C0     CLRF 0x40                          342:           clrf none
0167  01C1     CLRF 0x41                          343:           clrf light1
0168  01C2     CLRF 0x42                          344:           clrf light2
0169  01C3     CLRF 0x43                          345:           clrf light3
016A  01C4     CLRF 0x44                          346:           clrf light4
016B  01C5     CLRF 0x45                          347:           clrf light5
016C  01C6     CLRF 0x46                          348:           clrf light6
016D  01C7     CLRF 0x47                          349:           clrf light7
016E  01C8     CLRF 0x48                          350:           clrf light8
016F  01C9     CLRF 0x49                          351:           clrf light9
                                                  352:   
                                                  353:   count_loop
0170  3000     MOVLW 0x0                          354:           movlw b'00000000'
0171  0085     MOVWF PORTA                        355:           movwf PORTA
0172  219E     CALL 0x19E                         356:           call Check_Flicker
0173  084A     MOVF 0x4A, W                       357:           movf result_temp, w
0174  00C1     MOVWF 0x41                         358:           movwf light1
                                                  359:   
0175  3001     MOVLW 0x1                          360:           movlw b'00000001'
0176  0085     MOVWF PORTA                        361:           movwf PORTA
0177  219E     CALL 0x19E                         362:           call Check_Flicker
0178  084A     MOVF 0x4A, W                       363:           movf result_temp, w
0179  00C2     MOVWF 0x42                         364:           movwf light2
                                                  365:   
017A  3002     MOVLW 0x2                          366:           movlw b'00000010'
017B  0085     MOVWF PORTA                        367:           movwf PORTA
017C  219E     CALL 0x19E                         368:           call Check_Flicker
017D  084A     MOVF 0x4A, W                       369:           movf result_temp, w
017E  00C3     MOVWF 0x43                         370:           movwf light3
                                                  371:   
017F  3003     MOVLW 0x3                          372:           movlw b'00000011'
0180  0085     MOVWF PORTA                        373:           movwf PORTA
0181  219E     CALL 0x19E                         374:           call Check_Flicker
0182  084A     MOVF 0x4A, W                       375:           movf result_temp, w
0183  00C4     MOVWF 0x44                         376:           movwf light4
                                                  377:   
0184  3004     MOVLW 0x4                          378:           movlw b'00000100'
0185  0085     MOVWF PORTA                        379:           movwf PORTA
0186  219E     CALL 0x19E                         380:           call Check_Flicker
0187  084A     MOVF 0x4A, W                       381:           movf result_temp, w
0188  00C5     MOVWF 0x45                         382:           movwf light5
                                                  383:   
0189  3005     MOVLW 0x5                          384:           movlw b'00000101'
018A  0085     MOVWF PORTA                        385:           movwf PORTA
018B  219E     CALL 0x19E                         386:           call Check_Flicker
018C  084A     MOVF 0x4A, W                       387:           movf result_temp, w
018D  00C6     MOVWF 0x46                         388:           movwf light6
                                                  389:   
018E  3006     MOVLW 0x6                          390:           movlw b'00000110'
018F  0085     MOVWF PORTA                        391:           movwf PORTA
0190  219E     CALL 0x19E                         392:           call Check_Flicker
0191  084A     MOVF 0x4A, W                       393:           movf result_temp, w
0192  00C7     MOVWF 0x47                         394:           movwf light7
                                                  395:   
0193  3007     MOVLW 0x7                          396:           movlw b'00000111'
0194  0085     MOVWF PORTA                        397:           movwf PORTA
0195  219E     CALL 0x19E                         398:           call Check_Flicker
0196  084A     MOVF 0x4A, W                       399:           movf result_temp, w
0197  00C8     MOVWF 0x48                         400:           movwf light8
                                                  401:   
0198  3008     MOVLW 0x8                          402:           movlw b'00001000'
0199  0085     MOVWF PORTA                        403:           movwf PORTA
019A  219E     CALL 0x19E                         404:           call Check_Flicker
019B  084A     MOVF 0x4A, W                       405:           movf result_temp, w
019C  00C9     MOVWF 0x49                         406:           movwf light9
019D  0008     RETURN                             407:           return
                                                  408:   
                                                  409:   Check_Flicker
019E  249B     CALL 0x49B                         410:           call    HalfS 
019F  01BF     CLRF 0x3F                          411:           clrf    signal
01A0  0805     MOVF PORTA, W                      412:           movf    PORTA, w
01A1  3910     ANDLW 0x10                         413:           andlw   b'00010000'
                                                  414:           ;movf    PORTB, w
                                                  415:           ;andlw   b'00000001'
01A2  1D03     BTFSS STATUS, 0x2                  416:           btfss   STATUS, Z
01A3  29B4     GOTO 0x1B4                         417:                   goto flickertime
01A4  0AC0     INCF 0x40, F                       418:           incf    none
01A5  0AAF     INCF 0x2F, F                       419:           incf    show_data
01A6  3001     MOVLW 0x1                          420:           movlw   b'00000001'
01A7  00CA     MOVWF 0x4A                         421:           movwf   result_temp
01A8  20D4     CALL 0xD4                          422:           call Clear_Display
01A9  082F     MOVF 0x2F, W                       423:           BCD_DisplayS show_data
01AA  390F     ANDLW 0xF
01AB  3E30     ADDLW 0x30
01AC  24DA     CALL 0x4DA
01AD  3020     MOVLW 0x20                         424:           movlw " "
01AE  24DA     CALL 0x4DA                         425:           call WR_DATA
01AF  304E     MOVLW 0x4E                         426:           movlw "N"
01B0  24DA     CALL 0x4DA                         427:           call WR_DATA
01B1  3020     MOVLW 0x20                         428:           movlw " "
01B2  24DA     CALL 0x4DA                         429:           call WR_DATA
01B3  29F5     GOTO 0x1F5                         430:           goto    Display_results
                                                  431:   
                                                  432:   flickertime
01B4  01BF     CLRF 0x3F                          433:           clrf    signal
                                                  434:          ; call    HalfS
                                                  435:          ; call    HalfS
                                                  436:          ; call    HalfS
01B5  249B     CALL 0x49B                         437:           call    HalfS
01B6  249B     CALL 0x49B                         438:           call    HalfS
01B7  249B     CALL 0x49B                         439:           call    HalfS
01B8  249B     CALL 0x49B                         440:           call    HalfS
01B9  01CA     CLRF 0x4A                          441:           clrf    result_temp
01BA  0AAF     INCF 0x2F, F                       442:           incf    show_data
01BB  3080     MOVLW 0x80                         443:           movlw   B'10000000' ;move cursor to position H?4B?
01BC  24CB     CALL 0x4CB                         444:           call    WR_INS
                                                  445:           
01BD  1F3F     BTFSS 0x3F, 0x6                    446:           btfss   signal, 6
                                                  447:           ;btfss   signal, 7
                                                  448:               ;goto    notflickerfail
01BE  29D2     GOTO 0x1D2                         449:               goto notflickerfail
01BF  1DBF     BTFSS 0x3F, 0x3                    450:           btfss   signal, 3
01C0  29D2     GOTO 0x1D2                         451:               goto notflickerfail 
01C1  0AB3     INCF 0x33, F                       452:           incf    flickerfail
01C2  3004     MOVLW 0x4                          453:           movlw   b'00000100'
01C3  00CA     MOVWF 0x4A                         454:           movwf   result_temp
01C4  20D4     CALL 0xD4                          455:           call Clear_Display
01C5  082F     MOVF 0x2F, W                       456:           BCD_DisplayS show_data
01C6  390F     ANDLW 0xF
01C7  3E30     ADDLW 0x30
01C8  24DA     CALL 0x4DA
01C9  3020     MOVLW 0x20                         457:           movlw " "
01CA  24DA     CALL 0x4DA                         458:           call WR_DATA
01CB  3046     MOVLW 0x46                         459:           movlw "F"
01CC  24DA     CALL 0x4DA                         460:           call WR_DATA
01CD  3046     MOVLW 0x46                         461:           movlw "F"
01CE  24DA     CALL 0x4DA                         462:           call WR_DATA
01CF  3020     MOVLW 0x20                         463:           movlw " "
01D0  24DA     CALL 0x4DA                         464:           call WR_DATA
01D1  29F5     GOTO 0x1F5                         465:           goto    Display_results
                                                  466:   
                                                  467:   notflickerfail 
01D2  083F     MOVF 0x3F, W                       468:           movf    signal, w
01D3  39F8     ANDLW 0xF8                         469:           andlw   b'11111000'
01D4  1D03     BTFSS STATUS, 0x2                  470:           btfss   STATUS, Z
01D5  29E7     GOTO 0x1E7                         471:               goto    goodcandle
01D6  0AB4     INCF 0x34, F                       472:           incf    ledfail
01D7  3002     MOVLW 0x2                          473:           movlw   b'00000010'
01D8  00CA     MOVWF 0x4A                         474:           movwf   result_temp
01D9  20D4     CALL 0xD4                          475:           call Clear_Display
01DA  082F     MOVF 0x2F, W                       476:           BCD_DisplayS show_data
01DB  390F     ANDLW 0xF
01DC  3E30     ADDLW 0x30
01DD  24DA     CALL 0x4DA
01DE  3020     MOVLW 0x20                         477:           movlw " "
01DF  24DA     CALL 0x4DA                         478:           call WR_DATA
01E0  304C     MOVLW 0x4C                         479:           movlw "L"
01E1  24DA     CALL 0x4DA                         480:           call WR_DATA
01E2  3046     MOVLW 0x46                         481:           movlw "F"
01E3  24DA     CALL 0x4DA                         482:           call WR_DATA
01E4  3020     MOVLW 0x20                         483:           movlw " "
01E5  24DA     CALL 0x4DA                         484:           call WR_DATA
01E6  29F5     GOTO 0x1F5                         485:           goto    Display_results
                                                  486:   
                                                  487:   goodcandle    
01E7  0AB2     INCF 0x32, F                       488:           incf    pass
01E8  3008     MOVLW 0x8                          489:           movlw   b'00001000'
01E9  00CA     MOVWF 0x4A                         490:           movwf   result_temp
01EA  20D4     CALL 0xD4                          491:           call Clear_Display
01EB  082F     MOVF 0x2F, W                       492:           BCD_DisplayS show_data
01EC  390F     ANDLW 0xF
01ED  3E30     ADDLW 0x30
01EE  24DA     CALL 0x4DA
01EF  3020     MOVLW 0x20                         493:           movlw " "
01F0  24DA     CALL 0x4DA                         494:           call WR_DATA
01F1  3050     MOVLW 0x50                         495:           movlw "P"
01F2  24DA     CALL 0x4DA                         496:           call WR_DATA
01F3  3020     MOVLW 0x20                         497:           movlw " "
01F4  24DA     CALL 0x4DA                         498:           call WR_DATA
                                                  499:   
                                                  500:   
                                                  501:   Display_results
                                                  502:           ;BCD_DisplayS show_data
01F5  2528     CALL 0x528                         503:           call    Convert1
01F6  20D1     CALL 0xD1                          504:           call Switch_Lines
01F7  01A3     CLRF 0x23                          505:           Display     Trial
01F8  0103     CLRW
01F9  0823     MOVF 0x23, W
01FA  20C2     CALL 0xC2
01FB  3A00     XORLW 0x0
01FC  1903     BTFSC STATUS, 0x2
01FD  2A01     GOTO 0x201
01FE  24DA     CALL 0x4DA
01FF  0AA3     INCF 0x23, F
0200  29F9     GOTO 0x1F9
0201  30C2     MOVLW 0xC2                         506:           movlw   B'11000010' ;move cursor to Pass
0202  24CB     CALL 0x4CB                         507:           call    WR_INS
0203  0832     MOVF 0x32, W                       508:           BCD_DisplayS pass
0204  390F     ANDLW 0xF
0205  3E30     ADDLW 0x30
0206  24DA     CALL 0x4DA
0207  30C6     MOVLW 0xC6                         509:           movlw   B'11000110' ;move cursor to 46
0208  24CB     CALL 0x4CB                         510:           call    WR_INS
0209  0833     MOVF 0x33, W                       511:           BCD_DisplayS flickerfail
020A  390F     ANDLW 0xF
020B  3E30     ADDLW 0x30
020C  24DA     CALL 0x4DA
020D  30CA     MOVLW 0xCA                         512:           movlw   B'11001010' ;move cursor to position 4A
020E  24CB     CALL 0x4CB                         513:           call    WR_INS
020F  0834     MOVF 0x34, W                       514:           BCD_DisplayS ledfail
0210  390F     ANDLW 0xF
0211  3E30     ADDLW 0x30
0212  24DA     CALL 0x4DA
0213  30CD     MOVLW 0xCD                         515:           movlw   B'11001101' ;move crusor to 4E
0214  24CB     CALL 0x4CB                         516:           call    WR_INS
0215  0840     MOVF 0x40, W                       517:           BCD_DisplayS none
0216  390F     ANDLW 0xF
0217  3E30     ADDLW 0x30
0218  24DA     CALL 0x4DA
0219  0008     RETURN                             518:           return
                                                  519:   
                                                  520:   results_access
021A  3080     MOVLW 0x80                         521:            movlw   B'10000000' ;move cursor to Pass
021B  24CB     CALL 0x4CB                         522:            call    WR_INS
021C  01A3     CLRF 0x23                          523:            Display PMenu
021D  0103     CLRW
021E  0823     MOVF 0x23, W
021F  20AD     CALL 0xAD
0220  3A00     XORLW 0x0
0221  1903     BTFSC STATUS, 0x2
0222  2A26     GOTO 0x226
0223  24DA     CALL 0x4DA
0224  0AA3     INCF 0x23, F
0225  2A1E     GOTO 0x21E
                                                  524:    
0226  249B     CALL 0x49B                         525:            call		HalfS    ;Wait until data is available from the keypad
0227  1C86     BTFSS PORTB, 0x1                   526:            btfss		PORTB,1
0228  2A1A     GOTO 0x21A                         527:            goto		results_access
                                                  528:   
0229  0E06     SWAPF PORTB, W                     529:            swapf		PORTB,W     ;Read PortB<7:4> into W<3:0>
022A  390F     ANDLW 0xF                          530:            andlw		0x0F
022B  00A5     MOVWF 0x25                         531:            movwf      key_temp
                                                  532:   
                                                  533:   lightone
022C  3A00     XORLW 0x0                          534:            xorlw      D'0'
022D  1D03     BTFSS STATUS, 0x2                  535:            btfss      STATUS, Z
022E  2A3A     GOTO 0x23A                         536:               goto    lighttwo
022F  0841     MOVF 0x41, W                       537:            movf       light1, w
0230  00CA     MOVWF 0x4A                         538:            movwf      result_temp
0231  20D1     CALL 0xD1                          539:            call       Switch_Lines
0232  3031     MOVLW 0x31                         540:            movlw      "1"
0233  24DA     CALL 0x4DA                         541:            call       WR_DATA
0234  303A     MOVLW 0x3A                         542:            movlw      ":"
0235  24DA     CALL 0x4DA                         543:            call       WR_DATA
0236  22B3     CALL 0x2B3                         544:            call       display
0237  249B     CALL 0x49B                         545:            call       HalfS
0238  20D4     CALL 0xD4                          546:            call       Clear_Display
0239  2A1A     GOTO 0x21A                         547:            goto       results_access
                                                  548:   
                                                  549:   lighttwo
023A  0825     MOVF 0x25, W                       550:           movf key_temp, W
023B  3A01     XORLW 0x1                          551:           xorlw       D'1'
023C  1D03     BTFSS STATUS, 0x2                  552:           btfss       STATUS, Z
023D  2A49     GOTO 0x249                         553:               goto    lightthree
023E  0842     MOVF 0x42, W                       554:           movf        light2, w
023F  00CA     MOVWF 0x4A                         555:           movwf       result_temp
0240  20D1     CALL 0xD1                          556:           call        Switch_Lines
0241  3032     MOVLW 0x32                         557:           movlw       "2"
0242  24DA     CALL 0x4DA                         558:           call        WR_DATA
0243  303A     MOVLW 0x3A                         559:           movlw       ":"
0244  24DA     CALL 0x4DA                         560:           call        WR_DATA
0245  22B3     CALL 0x2B3                         561:           call        display
0246  249B     CALL 0x49B                         562:           call        HalfS
0247  20D4     CALL 0xD4                          563:           call        Clear_Display
0248  2A1A     GOTO 0x21A                         564:           goto        results_access
                                                  565:   
                                                  566:   lightthree 
0249  0825     MOVF 0x25, W                       567:           movf key_temp, W
024A  3A02     XORLW 0x2                          568:           xorlw       D'2'
024B  1D03     BTFSS STATUS, 0x2                  569:           btfss       STATUS, Z
024C  2A58     GOTO 0x258                         570:               goto    lightfour
024D  0843     MOVF 0x43, W                       571:           movf        light3, w
024E  00CA     MOVWF 0x4A                         572:           movwf       result_temp
024F  20D1     CALL 0xD1                          573:           call        Switch_Lines
0250  3033     MOVLW 0x33                         574:           movlw       "3"
0251  24DA     CALL 0x4DA                         575:           call        WR_DATA
0252  303A     MOVLW 0x3A                         576:           movlw       ":"
0253  24DA     CALL 0x4DA                         577:           call        WR_DATA
0254  22B3     CALL 0x2B3                         578:           call        display
0255  249B     CALL 0x49B                         579:           call        HalfS
0256  20D4     CALL 0xD4                          580:           call        Clear_Display
0257  2A1A     GOTO 0x21A                         581:           goto        results_access
                                                  582:   
                                                  583:   lightfour
0258  0825     MOVF 0x25, W                       584:           movf key_temp, W
0259  3A04     XORLW 0x4                          585:           xorlw       D'4'
025A  1D03     BTFSS STATUS, 0x2                  586:           btfss       STATUS, Z
025B  2A67     GOTO 0x267                         587:               goto    lightfive
025C  0844     MOVF 0x44, W                       588:           movf        light4, w
025D  00CA     MOVWF 0x4A                         589:           movwf       result_temp
025E  20D1     CALL 0xD1                          590:           call        Switch_Lines
025F  3034     MOVLW 0x34                         591:           movlw       "4"
0260  24DA     CALL 0x4DA                         592:           call        WR_DATA
0261  303A     MOVLW 0x3A                         593:           movlw       ":"
0262  24DA     CALL 0x4DA                         594:           call        WR_DATA
0263  22B3     CALL 0x2B3                         595:           call        display
0264  249B     CALL 0x49B                         596:           call        HalfS
0265  20D4     CALL 0xD4                          597:           call        Clear_Display
0266  2A1A     GOTO 0x21A                         598:           goto        results_access
                                                  599:   
                                                  600:   lightfive
0267  0825     MOVF 0x25, W                       601:           movf key_temp, W
0268  3A05     XORLW 0x5                          602:           xorlw       D'5'
0269  1D03     BTFSS STATUS, 0x2                  603:           btfss       STATUS, Z
026A  2A76     GOTO 0x276                         604:               goto    lightsix
026B  0845     MOVF 0x45, W                       605:           movf       light5, w
026C  00CA     MOVWF 0x4A                         606:           movwf      result_temp
026D  20D1     CALL 0xD1                          607:           call        Switch_Lines
026E  3035     MOVLW 0x35                         608:           movlw      "5"
026F  24DA     CALL 0x4DA                         609:           call       WR_DATA
0270  303A     MOVLW 0x3A                         610:           movlw      ":"
0271  24DA     CALL 0x4DA                         611:           call       WR_DATA
0272  22B3     CALL 0x2B3                         612:           call       display
0273  249B     CALL 0x49B                         613:           call       HalfS
0274  20D4     CALL 0xD4                          614:           call       Clear_Display
0275  2A1A     GOTO 0x21A                         615:           goto       results_access
                                                  616:   
                                                  617:   lightsix
0276  0825     MOVF 0x25, W                       618:           movf key_temp, W
0277  3A06     XORLW 0x6                          619:           xorlw       D'6'
0278  1D03     BTFSS STATUS, 0x2                  620:           btfss       STATUS, Z
0279  2A85     GOTO 0x285                         621:               goto    lightseven
027A  0846     MOVF 0x46, W                       622:            movf       light6, w
027B  00CA     MOVWF 0x4A                         623:            movwf      result_temp
027C  20D1     CALL 0xD1                          624:            call Switch_Lines
027D  3036     MOVLW 0x36                         625:            movlw      "6"
027E  24DA     CALL 0x4DA                         626:            call       WR_DATA
027F  303A     MOVLW 0x3A                         627:            movlw      ":"
0280  24DA     CALL 0x4DA                         628:            call       WR_DATA
0281  22B3     CALL 0x2B3                         629:            call       display
0282  249B     CALL 0x49B                         630:            call       HalfS
0283  20D4     CALL 0xD4                          631:            call Clear_Display
0284  2A1A     GOTO 0x21A                         632:            goto       results_access
                                                  633:   
                                                  634:   lightseven
0285  0825     MOVF 0x25, W                       635:           movf key_temp, W
0286  3A08     XORLW 0x8                          636:           xorlw       D'8'
0287  1D03     BTFSS STATUS, 0x2                  637:           btfss       STATUS, Z
0288  2A94     GOTO 0x294                         638:               goto    lighteight
0289  0847     MOVF 0x47, W                       639:            movf       light7, w
028A  00CA     MOVWF 0x4A                         640:            movwf      result_temp
028B  20D1     CALL 0xD1                          641:            call Switch_Lines
028C  3037     MOVLW 0x37                         642:            movlw      "7"
028D  24DA     CALL 0x4DA                         643:            call       WR_DATA
028E  303A     MOVLW 0x3A                         644:            movlw      ":"
028F  24DA     CALL 0x4DA                         645:            call       WR_DATA
0290  22B3     CALL 0x2B3                         646:            call       display
0291  249B     CALL 0x49B                         647:            call       HalfS
0292  20D4     CALL 0xD4                          648:            call Clear_Display
0293  2A1A     GOTO 0x21A                         649:            goto       results_access
                                                  650:   
                                                  651:   lighteight
0294  0825     MOVF 0x25, W                       652:           movf key_temp, W
0295  3A09     XORLW 0x9                          653:           xorlw       D'9'
0296  1D03     BTFSS STATUS, 0x2                  654:           btfss       STATUS, Z
0297  2AA3     GOTO 0x2A3                         655:               goto    lightnine
0298  0848     MOVF 0x48, W                       656:            movf       light8, w
0299  00CA     MOVWF 0x4A                         657:            movwf      result_temp
029A  20D1     CALL 0xD1                          658:            call Switch_Lines
029B  3038     MOVLW 0x38                         659:            movlw      "8"
029C  24DA     CALL 0x4DA                         660:            call       WR_DATA
029D  303A     MOVLW 0x3A                         661:            movlw      ":"
029E  24DA     CALL 0x4DA                         662:            call       WR_DATA
029F  22B3     CALL 0x2B3                         663:            call       display
02A0  249B     CALL 0x49B                         664:            call       HalfS
02A1  20D4     CALL 0xD4                          665:            call Clear_Display
02A2  2A1A     GOTO 0x21A                         666:            goto       results_access
                                                  667:   
                                                  668:   lightnine
02A3  0825     MOVF 0x25, W                       669:           movf key_temp, W
02A4  3A0A     XORLW 0xA                          670:           xorlw       D'10'
02A5  1D03     BTFSS STATUS, 0x2                  671:           btfss       STATUS, Z
02A6  2AB2     GOTO 0x2B2                         672:               goto    next
02A7  0849     MOVF 0x49, W                       673:            movf       light9, w
02A8  00CA     MOVWF 0x4A                         674:            movwf      result_temp
02A9  20D1     CALL 0xD1                          675:            call Switch_Lines
02AA  3039     MOVLW 0x39                         676:            movlw      "9"
02AB  24DA     CALL 0x4DA                         677:            call       WR_DATA
02AC  303A     MOVLW 0x3A                         678:            movlw      ":"
02AD  24DA     CALL 0x4DA                         679:            call       WR_DATA
02AE  22B3     CALL 0x2B3                         680:            call       display
02AF  249B     CALL 0x49B                         681:            call       HalfS
02B0  20D4     CALL 0xD4                          682:            call Clear_Display
02B1  2A1A     GOTO 0x21A                         683:            goto       results_access
                                                  684:   
                                                  685:   next
02B2  0008     RETURN                             686:            return
                                                  687:   
                                                  688:   
                                                  689:   display
02B3  1C4A     BTFSS 0x4A, 0x0                    690:           btfss   result_temp, 0
02B4  2AB8     GOTO 0x2B8                         691:               goto notnone
02B5  304E     MOVLW 0x4E                         692:           movlw "N"
02B6  24DA     CALL 0x4DA                         693:           call WR_DATA
02B7  2AC8     GOTO 0x2C8                         694:           goto end_display
                                                  695:   
                                                  696:   notnone
02B8  1CCA     BTFSS 0x4A, 0x1                    697:           btfss   result_temp, 1
02B9  2ABF     GOTO 0x2BF                         698:               goto notlf
02BA  304C     MOVLW 0x4C                         699:           movlw "L"
02BB  24DA     CALL 0x4DA                         700:           call WR_DATA
02BC  3046     MOVLW 0x46                         701:           movlw "F"
02BD  24DA     CALL 0x4DA                         702:           call WR_DATA
02BE  2AC8     GOTO 0x2C8                         703:           goto end_display
                                                  704:   
                                                  705:   notlf
02BF  1D4A     BTFSS 0x4A, 0x2                    706:           btfss   result_temp, 2
02C0  2AC6     GOTO 0x2C6                         707:               goto notff
02C1  3046     MOVLW 0x46                         708:           movlw "F"
02C2  24DA     CALL 0x4DA                         709:           call WR_DATA
02C3  3046     MOVLW 0x46                         710:           movlw "F"
02C4  24DA     CALL 0x4DA                         711:           call WR_DATA
02C5  2AC8     GOTO 0x2C8                         712:           goto end_display
                                                  713:   notff
02C6  3050     MOVLW 0x50                         714:           movlw "P"
02C7  24DA     CALL 0x4DA                         715:           call WR_DATA
                                                  716:   
                                                  717:   end_display
02C8  249B     CALL 0x49B                         718:           call HalfS
02C9  0008     RETURN                             719:           return
                                                  720:   
                                                  721:   pmenu_access
02CA  0186     CLRF PORTB                         722:            clrf       PORTB
02CB  01A5     CLRF 0x25                          723:            clrf       key_temp
02CC  249B     CALL 0x49B                         724:            call		HalfS    ;Wait until data is available from the keypad
02CD  1C86     BTFSS PORTB, 0x1                   725:            btfss		PORTB,1
02CE  2ACA     GOTO 0x2CA                         726:            goto		pmenu_access
                                                  727:   
02CF  0E06     SWAPF PORTB, W                     728:            swapf		PORTB,W     ;Read PortB<7:4> into W<3:0>
02D0  390F     ANDLW 0xF                          729:            andlw		0x0F
02D1  00A5     MOVWF 0x25                         730:            movwf      key_temp
                                                  731:   
                                                  732:   check_1
02D2  0825     MOVF 0x25, W                       733:           movf key_temp, W
02D3  3A00     XORLW 0x0                          734:           xorlw D'0'
02D4  1D03     BTFSS STATUS, 0x2                  735:           btfss STATUS, Z
02D5  2B12     GOTO 0x312                         736:               goto check_2
02D6  20D4     CALL 0xD4                          737:           call Clear_Display
02D7  3001     MOVLW 0x1                          738:           movlw H'01'
02D8  00A4     MOVWF 0x24                         739:           movwf lcd_tmp
02D9  0E24     SWAPF 0x24, W                      740:           BCD_Display lcd_tmp
02DA  390F     ANDLW 0xF
02DB  3E30     ADDLW 0x30
02DC  24DA     CALL 0x4DA
02DD  2565     CALL 0x565
02DE  0824     MOVF 0x24, W
02DF  390F     ANDLW 0xF
02E0  3E30     ADDLW 0x30
02E1  24DA     CALL 0x4DA
02E2  20D1     CALL 0xD1                          741:           call Switch_Lines
02E3  01A3     CLRF 0x23                          742:           Display Trial
02E4  0103     CLRW
02E5  0823     MOVF 0x23, W
02E6  20C2     CALL 0xC2
02E7  3A00     XORLW 0x0
02E8  1903     BTFSC STATUS, 0x2
02E9  2AED     GOTO 0x2ED
02EA  24DA     CALL 0x4DA
02EB  0AA3     INCF 0x23, F
02EC  2AE5     GOTO 0x2E5
02ED  3010     MOVLW 0x10                         743:           movlw    0x10
02EE  00BC     MOVWF 0x3C                         744:           movwf    ADDRL
02EF  22F2     CALL 0x2F2                         745:           call display_EE
02F0  249B     CALL 0x49B                         746:           call HalfS
02F1  2ACA     GOTO 0x2CA                         747:           goto pmenu_access
                                                  748:   
                                                  749:   display_EE
02F2  25B4     CALL 0x5B4                         750:           call read_EE
02F3  30C2     MOVLW 0xC2                         751:           movlw   B'11000010' ;move cursor to Pass
02F4  24CB     CALL 0x4CB                         752:           call WR_INS
02F5  083D     MOVF 0x3D, W                       753:           BCD_DisplayS DATAL
02F6  390F     ANDLW 0xF
02F7  3E30     ADDLW 0x30
02F8  24DA     CALL 0x4DA
02F9  30C6     MOVLW 0xC6                         754:           movlw   B'11000110' ;move cursor to 46
02FA  24CB     CALL 0x4CB                         755:           call WR_INS
02FB  0ABC     INCF 0x3C, F                       756:           incf ADDRL
02FC  25B4     CALL 0x5B4                         757:           call read_EE
02FD  083D     MOVF 0x3D, W                       758:           BCD_DisplayS DATAL
02FE  390F     ANDLW 0xF
02FF  3E30     ADDLW 0x30
0300  24DA     CALL 0x4DA
0301  30CA     MOVLW 0xCA                         759:           movlw   B'11001010' ;move cursor to position 4A
0302  24CB     CALL 0x4CB                         760:           call WR_INS
0303  0ABC     INCF 0x3C, F                       761:           incf ADDRL
0304  25B4     CALL 0x5B4                         762:           call read_EE
0305  083D     MOVF 0x3D, W                       763:           BCD_DisplayS DATAL
0306  390F     ANDLW 0xF
0307  3E30     ADDLW 0x30
0308  24DA     CALL 0x4DA
0309  30CD     MOVLW 0xCD                         764:           movlw   B'11001101' ;move cursor to position 4A
030A  24CB     CALL 0x4CB                         765:           call WR_INS
030B  0ABC     INCF 0x3C, F                       766:           incf ADDRL
030C  25B4     CALL 0x5B4                         767:           call read_EE
030D  083D     MOVF 0x3D, W                       768:           BCD_DisplayS DATAL
030E  390F     ANDLW 0xF
030F  3E30     ADDLW 0x30
0310  24DA     CALL 0x4DA
0311  0008     RETURN                             769:           return 
                                                  770:   
                                                  771:   check_2
0312  0825     MOVF 0x25, W                       772:           movf key_temp, W
0313  3A01     XORLW 0x1                          773:           xorlw D'1'
0314  1D03     BTFSS STATUS, 0x2                  774:           btfss STATUS, Z
0315  2B32     GOTO 0x332                         775:               goto check_3
0316  20D4     CALL 0xD4                          776:           call Clear_Display
0317  3002     MOVLW 0x2                          777:           movlw H'02'
0318  00A4     MOVWF 0x24                         778:           movwf lcd_tmp
0319  0E24     SWAPF 0x24, W                      779:           BCD_Display lcd_tmp
031A  390F     ANDLW 0xF
031B  3E30     ADDLW 0x30
031C  24DA     CALL 0x4DA
031D  2565     CALL 0x565
031E  0824     MOVF 0x24, W
031F  390F     ANDLW 0xF
0320  3E30     ADDLW 0x30
0321  24DA     CALL 0x4DA
0322  20D1     CALL 0xD1                          780:           call Switch_Lines
0323  01A3     CLRF 0x23                          781:           Display Trial
0324  0103     CLRW
0325  0823     MOVF 0x23, W
0326  20C2     CALL 0xC2
0327  3A00     XORLW 0x0
0328  1903     BTFSC STATUS, 0x2
0329  2B2D     GOTO 0x32D
032A  24DA     CALL 0x4DA
032B  0AA3     INCF 0x23, F
032C  2B25     GOTO 0x325
032D  3014     MOVLW 0x14                         782:           movlw    0x14
032E  00BC     MOVWF 0x3C                         783:           movwf    ADDRL
032F  22F2     CALL 0x2F2                         784:           call display_EE
0330  249B     CALL 0x49B                         785:           call HalfS
0331  2ACA     GOTO 0x2CA                         786:           goto pmenu_access
                                                  787:   
                                                  788:   check_3
0332  0825     MOVF 0x25, W                       789:           movf key_temp, W
0333  3A02     XORLW 0x2                          790:           xorlw D'2'
0334  1D03     BTFSS STATUS, 0x2                  791:           btfss STATUS, Z
0335  2B52     GOTO 0x352                         792:               goto check_4
0336  20D4     CALL 0xD4                          793:           call Clear_Display
0337  3003     MOVLW 0x3                          794:           movlw D'3'
0338  00A4     MOVWF 0x24                         795:           movwf lcd_tmp
0339  0E24     SWAPF 0x24, W                      796:           BCD_Display lcd_tmp
033A  390F     ANDLW 0xF
033B  3E30     ADDLW 0x30
033C  24DA     CALL 0x4DA
033D  2565     CALL 0x565
033E  0824     MOVF 0x24, W
033F  390F     ANDLW 0xF
0340  3E30     ADDLW 0x30
0341  24DA     CALL 0x4DA
0342  20D1     CALL 0xD1                          797:           call Switch_Lines
0343  01A3     CLRF 0x23                          798:           Display Trial
0344  0103     CLRW
0345  0823     MOVF 0x23, W
0346  20C2     CALL 0xC2
0347  3A00     XORLW 0x0
0348  1903     BTFSC STATUS, 0x2
0349  2B4D     GOTO 0x34D
034A  24DA     CALL 0x4DA
034B  0AA3     INCF 0x23, F
034C  2B45     GOTO 0x345
034D  3018     MOVLW 0x18                         799:           movlw    0x18
034E  00BC     MOVWF 0x3C                         800:           movwf    ADDRL
034F  22F2     CALL 0x2F2                         801:           call display_EE
0350  249B     CALL 0x49B                         802:           call HalfS
0351  2ACA     GOTO 0x2CA                         803:           goto pmenu_access
                                                  804:   
                                                  805:   check_4
0352  0825     MOVF 0x25, W                       806:           movf key_temp, W
0353  3A04     XORLW 0x4                          807:           xorlw D'4'
0354  1D03     BTFSS STATUS, 0x2                  808:           btfss STATUS, Z
0355  2B72     GOTO 0x372                         809:               goto check_5
0356  20D4     CALL 0xD4                          810:           call Clear_Display
0357  3004     MOVLW 0x4                          811:           movlw H'04'
0358  00A4     MOVWF 0x24                         812:           movwf lcd_tmp
0359  0E24     SWAPF 0x24, W                      813:           BCD_Display lcd_tmp
035A  390F     ANDLW 0xF
035B  3E30     ADDLW 0x30
035C  24DA     CALL 0x4DA
035D  2565     CALL 0x565
035E  0824     MOVF 0x24, W
035F  390F     ANDLW 0xF
0360  3E30     ADDLW 0x30
0361  24DA     CALL 0x4DA
0362  20D1     CALL 0xD1                          814:           call Switch_Lines
0363  01A3     CLRF 0x23                          815:           Display Trial
0364  0103     CLRW
0365  0823     MOVF 0x23, W
0366  20C2     CALL 0xC2
0367  3A00     XORLW 0x0
0368  1903     BTFSC STATUS, 0x2
0369  2B6D     GOTO 0x36D
036A  24DA     CALL 0x4DA
036B  0AA3     INCF 0x23, F
036C  2B65     GOTO 0x365
036D  301C     MOVLW 0x1C                         816:           movlw    0x1c
036E  00BC     MOVWF 0x3C                         817:           movwf    ADDRL
036F  22F2     CALL 0x2F2                         818:           call display_EE
0370  249B     CALL 0x49B                         819:           call HalfS
0371  2ACA     GOTO 0x2CA                         820:           goto pmenu_access
                                                  821:   
                                                  822:   check_5
0372  0825     MOVF 0x25, W                       823:           movf key_temp, W
0373  3A05     XORLW 0x5                          824:           xorlw D'5'
0374  1D03     BTFSS STATUS, 0x2                  825:           btfss STATUS, Z
0375  2B92     GOTO 0x392                         826:               goto check_6
0376  20D4     CALL 0xD4                          827:           call Clear_Display
0377  3005     MOVLW 0x5                          828:           movlw H'05'
0378  00A4     MOVWF 0x24                         829:           movwf lcd_tmp
0379  0E24     SWAPF 0x24, W                      830:           BCD_Display lcd_tmp
037A  390F     ANDLW 0xF
037B  3E30     ADDLW 0x30
037C  24DA     CALL 0x4DA
037D  2565     CALL 0x565
037E  0824     MOVF 0x24, W
037F  390F     ANDLW 0xF
0380  3E30     ADDLW 0x30
0381  24DA     CALL 0x4DA
0382  20D1     CALL 0xD1                          831:           call Switch_Lines
0383  01A3     CLRF 0x23                          832:           Display Trial
0384  0103     CLRW
0385  0823     MOVF 0x23, W
0386  20C2     CALL 0xC2
0387  3A00     XORLW 0x0
0388  1903     BTFSC STATUS, 0x2
0389  2B8D     GOTO 0x38D
038A  24DA     CALL 0x4DA
038B  0AA3     INCF 0x23, F
038C  2B85     GOTO 0x385
038D  3020     MOVLW 0x20                         833:           movlw    0x20
038E  00BC     MOVWF 0x3C                         834:           movwf    ADDRL
038F  22F2     CALL 0x2F2                         835:           call display_EE
0390  249B     CALL 0x49B                         836:           call HalfS
0391  2ACA     GOTO 0x2CA                         837:           goto pmenu_access
                                                  838:   
                                                  839:   check_6
0392  0825     MOVF 0x25, W                       840:           movf key_temp, W
0393  3A06     XORLW 0x6                          841:           xorlw D'6'
0394  1D03     BTFSS STATUS, 0x2                  842:           btfss STATUS, Z
0395  2BB2     GOTO 0x3B2                         843:               goto check_7
0396  20D4     CALL 0xD4                          844:           call Clear_Display
0397  3006     MOVLW 0x6                          845:           movlw H'06'
0398  00A4     MOVWF 0x24                         846:           movwf lcd_tmp
0399  0E24     SWAPF 0x24, W                      847:           BCD_Display lcd_tmp
039A  390F     ANDLW 0xF
039B  3E30     ADDLW 0x30
039C  24DA     CALL 0x4DA
039D  2565     CALL 0x565
039E  0824     MOVF 0x24, W
039F  390F     ANDLW 0xF
03A0  3E30     ADDLW 0x30
03A1  24DA     CALL 0x4DA
03A2  20D1     CALL 0xD1                          848:           call Switch_Lines
03A3  01A3     CLRF 0x23                          849:           Display Trial
03A4  0103     CLRW
03A5  0823     MOVF 0x23, W
03A6  20C2     CALL 0xC2
03A7  3A00     XORLW 0x0
03A8  1903     BTFSC STATUS, 0x2
03A9  2BAD     GOTO 0x3AD
03AA  24DA     CALL 0x4DA
03AB  0AA3     INCF 0x23, F
03AC  2BA5     GOTO 0x3A5
03AD  3024     MOVLW 0x24                         850:           movlw    0x24
03AE  00BC     MOVWF 0x3C                         851:           movwf    ADDRL
03AF  22F2     CALL 0x2F2                         852:           call display_EE
03B0  249B     CALL 0x49B                         853:           call HalfS
03B1  2ACA     GOTO 0x2CA                         854:           goto pmenu_access
                                                  855:   
                                                  856:   check_7
03B2  0825     MOVF 0x25, W                       857:           movf key_temp, W
03B3  3A08     XORLW 0x8                          858:           xorlw D'8'
03B4  1D03     BTFSS STATUS, 0x2                  859:           btfss STATUS, Z
03B5  2BD2     GOTO 0x3D2                         860:               goto check_8
03B6  20D4     CALL 0xD4                          861:           call Clear_Display
03B7  3007     MOVLW 0x7                          862:           movlw H'07'
03B8  00A4     MOVWF 0x24                         863:           movwf lcd_tmp
03B9  0E24     SWAPF 0x24, W                      864:           BCD_Display lcd_tmp
03BA  390F     ANDLW 0xF
03BB  3E30     ADDLW 0x30
03BC  24DA     CALL 0x4DA
03BD  2565     CALL 0x565
03BE  0824     MOVF 0x24, W
03BF  390F     ANDLW 0xF
03C0  3E30     ADDLW 0x30
03C1  24DA     CALL 0x4DA
03C2  20D1     CALL 0xD1                          865:           call Switch_Lines
03C3  01A3     CLRF 0x23                          866:           Display Trial
03C4  0103     CLRW
03C5  0823     MOVF 0x23, W
03C6  20C2     CALL 0xC2
03C7  3A00     XORLW 0x0
03C8  1903     BTFSC STATUS, 0x2
03C9  2BCD     GOTO 0x3CD
03CA  24DA     CALL 0x4DA
03CB  0AA3     INCF 0x23, F
03CC  2BC5     GOTO 0x3C5
03CD  3028     MOVLW 0x28                         867:           movlw    0x28
03CE  00BC     MOVWF 0x3C                         868:           movwf    ADDRL
03CF  22F2     CALL 0x2F2                         869:           call display_EE
03D0  249B     CALL 0x49B                         870:           call HalfS
03D1  2ACA     GOTO 0x2CA                         871:           goto pmenu_access
                                                  872:   
                                                  873:   check_8
03D2  0825     MOVF 0x25, W                       874:           movf key_temp, W
03D3  3A09     XORLW 0x9                          875:           xorlw D'9'
03D4  1D03     BTFSS STATUS, 0x2                  876:           btfss STATUS, Z
03D5  2BF2     GOTO 0x3F2                         877:               goto check_9
03D6  20D4     CALL 0xD4                          878:           call Clear_Display
03D7  3008     MOVLW 0x8                          879:           movlw H'08'
03D8  00A4     MOVWF 0x24                         880:           movwf lcd_tmp
03D9  0E24     SWAPF 0x24, W                      881:           BCD_Display lcd_tmp
03DA  390F     ANDLW 0xF
03DB  3E30     ADDLW 0x30
03DC  24DA     CALL 0x4DA
03DD  2565     CALL 0x565
03DE  0824     MOVF 0x24, W
03DF  390F     ANDLW 0xF
03E0  3E30     ADDLW 0x30
03E1  24DA     CALL 0x4DA
03E2  20D1     CALL 0xD1                          882:           call Switch_Lines
03E3  01A3     CLRF 0x23                          883:           Display Trial
03E4  0103     CLRW
03E5  0823     MOVF 0x23, W
03E6  20C2     CALL 0xC2
03E7  3A00     XORLW 0x0
03E8  1903     BTFSC STATUS, 0x2
03E9  2BED     GOTO 0x3ED
03EA  24DA     CALL 0x4DA
03EB  0AA3     INCF 0x23, F
03EC  2BE5     GOTO 0x3E5
03ED  302C     MOVLW 0x2C                         884:           movlw    0x2c
03EE  00BC     MOVWF 0x3C                         885:           movwf    ADDRL
03EF  22F2     CALL 0x2F2                         886:           call display_EE
03F0  249B     CALL 0x49B                         887:           call HalfS
03F1  2ACA     GOTO 0x2CA                         888:           goto pmenu_access
                                                  889:   
                                                  890:   check_9
03F2  0825     MOVF 0x25, W                       891:           movf key_temp, W
03F3  3A0A     XORLW 0xA                          892:           xorlw D'10'
03F4  1D03     BTFSS STATUS, 0x2                  893:           btfss STATUS, Z
03F5  2C12     GOTO 0x412                         894:               goto continue
03F6  20D4     CALL 0xD4                          895:           call Clear_Display
03F7  3009     MOVLW 0x9                          896:           movlw H'09'
03F8  00A4     MOVWF 0x24                         897:           movwf lcd_tmp
03F9  0E24     SWAPF 0x24, W                      898:           BCD_Display lcd_tmp
03FA  390F     ANDLW 0xF
03FB  3E30     ADDLW 0x30
03FC  24DA     CALL 0x4DA
03FD  2565     CALL 0x565
03FE  0824     MOVF 0x24, W
03FF  390F     ANDLW 0xF
0400  3E30     ADDLW 0x30
0401  24DA     CALL 0x4DA
0402  20D1     CALL 0xD1                          899:           call Switch_Lines
0403  01A3     CLRF 0x23                          900:           Display Trial
0404  0103     CLRW
0405  0823     MOVF 0x23, W
0406  20C2     CALL 0xC2
0407  3A00     XORLW 0x0
0408  1903     BTFSC STATUS, 0x2
0409  2C0D     GOTO 0x40D
040A  24DA     CALL 0x4DA
040B  0AA3     INCF 0x23, F
040C  2C05     GOTO 0x405
040D  3030     MOVLW 0x30                         901:           movlw    0x30
040E  00BC     MOVWF 0x3C                         902:           movwf    ADDRL
040F  22F2     CALL 0x2F2                         903:           call display_EE
0410  249B     CALL 0x49B                         904:           call HalfS
0411  2ACA     GOTO 0x2CA                         905:           goto pmenu_access
                                                  906:   
                                                  907:   continue
0412  20D4     CALL 0xD4                          908:           call Clear_Display
0413  0008     RETURN                             909:           return
                                                  910:   
                                                  911:   wait
0414  249B     CALL 0x49B                         912:            call		HalfS    ;Wait until data is available from the keypad
0415  1C86     BTFSS PORTB, 0x1                   913:            btfss		PORTB,1
0416  2C14     GOTO 0x414                         914:            goto		wait
0417  0008     RETURN                             915:            return
                                                  916:   
                                                  917:   show_RTC
                                                  918:   		;clear LCD screen
0418  3001     MOVLW 0x1                          919:   		movlw	b'00000001'
0419  24CB     CALL 0x4CB                         920:   		call	WR_INS
                                                  921:   
                                                  922:   		;Get year
041A  3032     MOVLW 0x32                         923:   		movlw	"2"				;First line shows 20**/**/**
041B  24DA     CALL 0x4DA                         924:   		call	WR_DATA
041C  3030     MOVLW 0x30                         925:   		movlw	"0"
041D  24DA     CALL 0x4DA                         926:   		call	WR_DATA
                                                  927:   
041E  3006     MOVLW 0x6                          928:   		rtc_read	0x06		;Read Address 0x06 from DS1307---year
041F  1283     BCF STATUS, 0x5
0420  1303     BCF STATUS, 0x6
0421  00F3     MOVWF com
0422  2711     CALL 0x711
0423  1283     BCF STATUS, 0x5
0424  1303     BCF STATUS, 0x6
0425  0875     MOVF 0x75, W
0426  2760     CALL 0x760
0427  0877     MOVF 0x77, W                       929:   		movfw	0x77
0428  24DA     CALL 0x4DA                         930:   		call	WR_DATA
0429  0878     MOVF 0x78, W                       931:   		movfw	0x78
042A  24DA     CALL 0x4DA                         932:   		call	WR_DATA
                                                  933:   
042B  302F     MOVLW 0x2F                         934:   		movlw	"/"
042C  24DA     CALL 0x4DA                         935:   		call	WR_DATA
                                                  936:   
                                                  937:   		;Get month
042D  3005     MOVLW 0x5                          938:   		rtc_read	0x05		;Read Address 0x05 from DS1307---month
042E  1283     BCF STATUS, 0x5
042F  1303     BCF STATUS, 0x6
0430  00F3     MOVWF com
0431  2711     CALL 0x711
0432  1283     BCF STATUS, 0x5
0433  1303     BCF STATUS, 0x6
0434  0875     MOVF 0x75, W
0435  2760     CALL 0x760
0436  0877     MOVF 0x77, W                       939:   		movfw	0x77
0437  24DA     CALL 0x4DA                         940:   		call	WR_DATA
0438  0878     MOVF 0x78, W                       941:   		movfw	0x78
0439  24DA     CALL 0x4DA                         942:   		call	WR_DATA
                                                  943:   
043A  302F     MOVLW 0x2F                         944:   		movlw	"/"
043B  24DA     CALL 0x4DA                         945:   		call	WR_DATA
                                                  946:   
                                                  947:   		;Get day
043C  3004     MOVLW 0x4                          948:   		rtc_read	0x04		;Read Address 0x04 from DS1307---day
043D  1283     BCF STATUS, 0x5
043E  1303     BCF STATUS, 0x6
043F  00F3     MOVWF com
0440  2711     CALL 0x711
0441  1283     BCF STATUS, 0x5
0442  1303     BCF STATUS, 0x6
0443  0875     MOVF 0x75, W
0444  2760     CALL 0x760
0445  0877     MOVF 0x77, W                       949:   		movfw	0x77
0446  24DA     CALL 0x4DA                         950:   		call	WR_DATA
0447  0878     MOVF 0x78, W                       951:   		movfw	0x78
0448  24DA     CALL 0x4DA                         952:   		call	WR_DATA
                                                  953:   
0449  30C0     MOVLW 0xC0                         954:   		movlw	B'11000000'		;Next line displays (hour):(min):(sec) **:**:**
044A  24CB     CALL 0x4CB                         955:   		call	WR_INS
                                                  956:   
                                                  957:   Refresh
044B  30C0     MOVLW 0xC0                         958:           movlw B'11000000' ;move cursor to position H?4B?
044C  24CB     CALL 0x4CB                         959:           call WR_INS
                                                  960:   
                                                  961:   		;Get hour
044D  3002     MOVLW 0x2                          962:   		rtc_read	0x02		;Read Address 0x02 from DS1307---hour
044E  1283     BCF STATUS, 0x5
044F  1303     BCF STATUS, 0x6
0450  00F3     MOVWF com
0451  2711     CALL 0x711
0452  1283     BCF STATUS, 0x5
0453  1303     BCF STATUS, 0x6
0454  0875     MOVF 0x75, W
0455  2760     CALL 0x760
0456  0877     MOVF 0x77, W                       963:   		movfw	0x77
0457  24DA     CALL 0x4DA                         964:   		call	WR_DATA
0458  0878     MOVF 0x78, W                       965:   		movfw	0x78
0459  24DA     CALL 0x4DA                         966:   		call	WR_DATA
045A  303A     MOVLW 0x3A                         967:   		movlw	":"
045B  24DA     CALL 0x4DA                         968:   		call	WR_DATA
                                                  969:   		;Get minute
045C  3001     MOVLW 0x1                          970:   		rtc_read	0x01		;Read Address 0x01 from DS1307---min
045D  1283     BCF STATUS, 0x5
045E  1303     BCF STATUS, 0x6
045F  00F3     MOVWF com
0460  2711     CALL 0x711
0461  1283     BCF STATUS, 0x5
0462  1303     BCF STATUS, 0x6
0463  0875     MOVF 0x75, W
0464  2760     CALL 0x760
0465  0877     MOVF 0x77, W                       971:   		movfw	0x77
0466  24DA     CALL 0x4DA                         972:   		call	WR_DATA
0467  0878     MOVF 0x78, W                       973:   		movfw	0x78
0468  24DA     CALL 0x4DA                         974:   		call	WR_DATA
0469  303A     MOVLW 0x3A                         975:   		movlw			":"
046A  24DA     CALL 0x4DA                         976:   		call	WR_DATA
                                                  977:   
                                                  978:   		;Get seconds
046B  3000     MOVLW 0x0                          979:   		rtc_read	0x00		;Read Address 0x00 from DS1307---seconds
046C  1283     BCF STATUS, 0x5
046D  1303     BCF STATUS, 0x6
046E  00F3     MOVWF com
046F  2711     CALL 0x711
0470  1283     BCF STATUS, 0x5
0471  1303     BCF STATUS, 0x6
0472  0875     MOVF 0x75, W
0473  2760     CALL 0x760
0474  0877     MOVF 0x77, W                       980:   		movfw	0x77
0475  24DA     CALL 0x4DA                         981:   		call	WR_DATA
0476  0878     MOVF 0x78, W                       982:   		movfw	0x78
0477  24DA     CALL 0x4DA                         983:   		call	WR_DATA
                                                  984:   
0478  249B     CALL 0x49B                         985:   		call	HalfS			;Delay for exactly one seconds and read DS1307 again
0479  249B     CALL 0x49B                         986:           call	HalfS    ;Wait until data is available from the keypad
047A  1C86     BTFSS PORTB, 0x1                   987:           btfss	PORTB,1
047B  2C4B     GOTO 0x44B                         988:               goto	Refresh
047C  0008     RETURN                             989:           return
                                                  990:   
                                                  991:   Motor_On
047D  3000     MOVLW 0x0                          992:       movlw 0x00 ;turn motor off
047E  0087     MOVWF PORTC                        993:       movwf PORTC
047F  249B     CALL 0x49B                         994:       call HalfS
0480  3001     MOVLW 0x1                          995:       movlw 0x01 ;turn motor on
0481  0087     MOVWF PORTC                        996:       movwf PORTC
0482  24BB     CALL 0x4BB                         997:       call EightS
0483  3000     MOVLW 0x0                          998:       movlw 0x00 ;turn motor off
0484  0087     MOVWF PORTC                        999:       movwf PORTC
0485  249B     CALL 0x49B                         1000:      call HalfS
0486  3001     MOVLW 0x1                          1001:      movlw 0x01 ;turn motor on
0487  0087     MOVWF PORTC                        1002:      movwf PORTC
0488  24BB     CALL 0x4BB                         1003:      call EightS
0489  3000     MOVLW 0x0                          1004:      movlw 0x00 ;turn motor off
048A  0087     MOVWF PORTC                        1005:      movwf PORTC
048B  249B     CALL 0x49B                         1006:      call HalfS
048C  20D4     CALL 0xD4                          1007:      call Clear_Display
048D  0008     RETURN                             1008:      return
                                                  1009:  
                                                  1010:  Motor_Off
048E  3002     MOVLW 0x2                          1011:      movlw 0x02 ;turn motor on
048F  0087     MOVWF PORTC                        1012:      movwf PORTC
0490  24AB     CALL 0x4AB                         1013:      call QuarterS
0491  3000     MOVLW 0x0                          1014:      movlw 0x00 ;turn motor off
0492  0087     MOVWF PORTC                        1015:      movwf PORTC
0493  249B     CALL 0x49B                         1016:      call HalfS
0494  3002     MOVLW 0x2                          1017:      movlw 0x02 ;turn motor on
0495  0087     MOVWF PORTC                        1018:      movwf PORTC
0496  24BB     CALL 0x4BB                         1019:      call EightS
0497  3000     MOVLW 0x0                          1020:      movlw 0x00 ;turn motor off
0498  0087     MOVWF PORTC                        1021:      movwf PORTC
0499  20D4     CALL 0xD4                          1022:      call Clear_Display
049A  0008     RETURN                             1023:      return
                                                  1024:  
                                                  1025:  HalfS
                                                  1026:  	local	HalfS_0
049B  3088     MOVLW 0x88                         1027:        movlw 0x88
049C  00A0     MOVWF 0x20                         1028:        movwf COUNTH
049D  30BD     MOVLW 0xBD                         1029:        movlw 0xBD
049E  00A1     MOVWF 0x21                         1030:        movwf COUNTM
049F  3003     MOVLW 0x3                          1031:        movlw 0x03
04A0  00A2     MOVWF 0x22                         1032:        movwf COUNTL
                                                  1033:  
                                                  1034:  HalfS_0
04A1  0BA0     DECFSZ 0x20, F                     1035:        decfsz COUNTH, f
04A2  2CA4     GOTO 0x4A4                         1036:        goto   $+2
04A3  0BA1     DECFSZ 0x21, F                     1037:        decfsz COUNTM, f
04A4  2CA6     GOTO 0x4A6                         1038:        goto   $+2
04A5  0BA2     DECFSZ 0x22, F                     1039:        decfsz COUNTL, f
04A6  2CA1     GOTO 0x4A1                         1040:        goto   HalfS_0
                                                  1041:  
04A7  2CA8     GOTO 0x4A8                         1042:        goto $+1
04A8  0000     NOP                                1043:        nop
04A9  0000     NOP                                1044:        nop
04AA  0008     RETURN                             1045:  		return
                                                  1046:  
                                                  1047:  QuarterS
                                                  1048:  	local	QuarterS_0
04AB  3044     MOVLW 0x44                         1049:        movlw 0x44
04AC  00A0     MOVWF 0x20                         1050:        movwf COUNTH
04AD  304F     MOVLW 0x4F                         1051:        movlw 0x4F
04AE  00A1     MOVWF 0x21                         1052:        movwf COUNTM
04AF  3003     MOVLW 0x3                          1053:        movlw 0x03
04B0  00A2     MOVWF 0x22                         1054:        movwf COUNTL
                                                  1055:  
                                                  1056:  QuarterS_0
04B1  0BA0     DECFSZ 0x20, F                     1057:        decfsz COUNTH, f
04B2  2CB4     GOTO 0x4B4                         1058:        goto   $+2
04B3  0BA1     DECFSZ 0x21, F                     1059:        decfsz COUNTM, f
04B4  2CB6     GOTO 0x4B6                         1060:        goto   $+2
04B5  0BA2     DECFSZ 0x22, F                     1061:        decfsz COUNTL, f
04B6  2CB1     GOTO 0x4B1                         1062:        goto   QuarterS_0
                                                  1063:  
04B7  2CB8     GOTO 0x4B8                         1064:        goto $+1
04B8  0000     NOP                                1065:        nop
04B9  0000     NOP                                1066:        nop
04BA  0008     RETURN                             1067:  		return
                                                  1068:  
                                                  1069:  EightS
                                                  1070:  	local	EightS_0
04BB  3020     MOVLW 0x20                         1071:        movlw 0x20
04BC  00A0     MOVWF 0x20                         1072:        movwf COUNTH
04BD  3020     MOVLW 0x20                         1073:        movlw 0x20
04BE  00A1     MOVWF 0x21                         1074:        movwf COUNTM
04BF  3003     MOVLW 0x3                          1075:        movlw 0x03
04C0  00A2     MOVWF 0x22                         1076:        movwf COUNTL
                                                  1077:  
                                                  1078:  EightS_0
04C1  0BA0     DECFSZ 0x20, F                     1079:        decfsz COUNTH, f
04C2  2CC4     GOTO 0x4C4                         1080:        goto   $+2
04C3  0BA1     DECFSZ 0x21, F                     1081:        decfsz COUNTM, f
04C4  2CC6     GOTO 0x4C6                         1082:        goto   $+2
04C5  0BA2     DECFSZ 0x22, F                     1083:        decfsz COUNTL, f
04C6  2CC1     GOTO 0x4C1                         1084:        goto   EightS_0
                                                  1085:  
04C7  2CC8     GOTO 0x4C8                         1086:        goto $+1
04C8  0000     NOP                                1087:        nop
04C9  0000     NOP                                1088:        nop
04CA  0008     RETURN                             1089:  		return
                                                  1090:  
                                                  1091:  WR_INS
04CB  1108     BCF PORTD, 0x2                     1092:  	bcf		RS				;clear RS
04CC  00A9     MOVWF 0x29                         1093:  	movwf	com				;W --> com
04CD  39F0     ANDLW 0xF0                         1094:  	andlw	0xF0			;mask 4 bits MSB w = X0
04CE  0088     MOVWF PORTD                        1095:  	movwf	PORTD			;Send 4 bits MSB
04CF  1588     BSF PORTD, 0x3                     1096:  	bsf		E				;
04D0  2565     CALL 0x565                         1097:  	call	lcdLongDelay	;__    __
04D1  1188     BCF PORTD, 0x3                     1098:  	bcf		E				;  |__|
04D2  0E29     SWAPF 0x29, W                      1099:  	swapf	com,w
04D3  39F0     ANDLW 0xF0                         1100:  	andlw	0xF0			;1111 0010
04D4  0088     MOVWF PORTD                        1101:  	movwf	PORTD			;send 4 bits LSB
04D5  1588     BSF PORTD, 0x3                     1102:  	bsf		E				;
04D6  2565     CALL 0x565                         1103:  	call	lcdLongDelay	;__    __
04D7  1188     BCF PORTD, 0x3                     1104:  	bcf		E				;  |__|
04D8  2565     CALL 0x565                         1105:  	call	lcdLongDelay
04D9  0008     RETURN                             1106:  	return
                                                  1107:  
                                                  1108:  WR_DATA
04DA  1508     BSF PORTD, 0x2                     1109:  	bsf		RS
04DB  00AA     MOVWF 0x2A                         1110:  	movwf	dat
04DC  082A     MOVF 0x2A, W                       1111:  	movf	dat,w
04DD  39F0     ANDLW 0xF0                         1112:  	andlw	0xF0
04DE  3E04     ADDLW 0x4                          1113:  	addlw	4
04DF  0088     MOVWF PORTD                        1114:  	movwf	PORTD
04E0  1588     BSF PORTD, 0x3                     1115:  	bsf		E				;
04E1  2565     CALL 0x565                         1116:  	call	lcdLongDelay	;__    __
04E2  1188     BCF PORTD, 0x3                     1117:  	bcf		E				;  |__|
04E3  0E2A     SWAPF 0x2A, W                      1118:  	swapf	dat,w
04E4  39F0     ANDLW 0xF0                         1119:  	andlw	0xF0
04E5  3E04     ADDLW 0x4                          1120:  	addlw	4
04E6  0088     MOVWF PORTD                        1121:  	movwf	PORTD
04E7  1588     BSF PORTD, 0x3                     1122:  	bsf		E				;
04E8  2565     CALL 0x565                         1123:  	call	lcdLongDelay	;__    __
04E9  1188     BCF PORTD, 0x3                     1124:  	bcf		E				;  |__|
04EA  0008     RETURN                             1125:  	return
                                                  1126:  
                                                  1127:  Convert
04EB  01BB     CLRF 0x3B                          1128:      clrf run_temp
                                                  1129:  ;save and restore
04EC  0835     MOVF 0x35, W                       1130:      movf runtime, w
04ED  00BB     MOVWF 0x3B                         1131:      movwf run_temp
04EE  3008     MOVLW 0x8                          1132:      movlw 8
04EF  00BA     MOVWF 0x3A                         1133:      movwf count_temp
04F0  01B9     CLRF 0x39                          1134:      clrf huns
04F1  01B8     CLRF 0x38                          1135:      clrf tens
04F2  01B7     CLRF 0x37                          1136:      clrf ones
                                                  1137:  
                                                  1138:  BCDADD3
                                                  1139:  
04F3  3005     MOVLW 0x5                          1140:      movlw 5
04F4  0239     SUBWF 0x39, W                      1141:      subwf huns, 0
04F5  1803     BTFSC STATUS, 0x0                  1142:      btfsc STATUS, C
04F6  2519     CALL 0x519                         1143:      CALL ADD3HUNS
                                                  1144:  
04F7  3005     MOVLW 0x5                          1145:      movlw 5
04F8  0238     SUBWF 0x38, W                      1146:      subwf tens, 0
04F9  1803     BTFSC STATUS, 0x0                  1147:      btfsc STATUS, C
04FA  251C     CALL 0x51C                         1148:      CALL ADD3TENS
                                                  1149:  
04FB  3005     MOVLW 0x5                          1150:      movlw 5
04FC  0237     SUBWF 0x37, W                      1151:      subwf ones, 0
04FD  1803     BTFSC STATUS, 0x0                  1152:      btfsc STATUS, C
04FE  251F     CALL 0x51F                         1153:      CALL ADD3ONES
                                                  1154:  
04FF  03BA     DECF 0x3A, F                       1155:      decf count_temp, 1
0500  1003     BCF STATUS, 0x0                    1156:      bcf STATUS, C
0501  0DB5     RLF 0x35, F                        1157:      rlf runtime, 1
0502  0DB7     RLF 0x37, F                        1158:      rlf ones, 1
0503  1A37     BTFSC 0x37, 0x4                    1159:      btfsc ones,4 ;
0504  2522     CALL 0x522                         1160:      CALL CARRYONES
0505  0DB8     RLF 0x38, F                        1161:      rlf tens, 1
                                                  1162:  
0506  1A38     BTFSC 0x38, 0x4                    1163:      btfsc tens,4 ;
0507  2525     CALL 0x525                         1164:      CALL CARRYTENS
0508  0DB9     RLF 0x39, F                        1165:      rlf huns,1
0509  1003     BCF STATUS, 0x0                    1166:      bcf STATUS, C
                                                  1167:  
050A  083A     MOVF 0x3A, W                       1168:      movf count_temp, 0
050B  1D03     BTFSS STATUS, 0x2                  1169:      btfss STATUS, Z
050C  2CF3     GOTO 0x4F3                         1170:      GOTO BCDADD3
                                                  1171:  
                                                  1172:  
050D  0839     MOVF 0x39, W                       1173:      movf huns, 0 ; add ASCII Offset
050E  3E30     ADDLW 0x30                         1174:      addlw h'30'
050F  24DA     CALL 0x4DA                         1175:      call WR_DATA
                                                  1176:  
0510  0838     MOVF 0x38, W                       1177:      movf tens, 0 ; add ASCII Offset
0511  3E30     ADDLW 0x30                         1178:      addlw h'30'
0512  24DA     CALL 0x4DA                         1179:      call WR_DATA
                                                  1180:  
0513  0837     MOVF 0x37, W                       1181:      movf ones, 0 ; add ASCII Offset
0514  3E30     ADDLW 0x30                         1182:      addlw h'30'
0515  24DA     CALL 0x4DA                         1183:      call WR_DATA
                                                  1184:  
0516  083B     MOVF 0x3B, W                       1185:      movf run_temp, w
0517  00B5     MOVWF 0x35                         1186:      movwf runtime
0518  0008     RETURN                             1187:      RETURN
                                                  1188:  
                                                  1189:  ADD3HUNS
0519  3003     MOVLW 0x3                          1190:      movlw 3
051A  07B9     ADDWF 0x39, F                      1191:      addwf huns,1
051B  0008     RETURN                             1192:      RETURN
                                                  1193:  
                                                  1194:  ADD3TENS
051C  3003     MOVLW 0x3                          1195:      movlw 3
051D  07B8     ADDWF 0x38, F                      1196:      addwf tens,1
051E  0008     RETURN                             1197:      RETURN
                                                  1198:  
                                                  1199:  ADD3ONES
051F  3003     MOVLW 0x3                          1200:      movlw 3
0520  07B7     ADDWF 0x37, F                      1201:      addwf ones,1
0521  0008     RETURN                             1202:      RETURN
                                                  1203:  
                                                  1204:  CARRYONES
0522  1237     BCF 0x37, 0x4                      1205:      bcf ones, 4
0523  1403     BSF STATUS, 0x0                    1206:      bsf STATUS, C
0524  0008     RETURN                             1207:      RETURN
                                                  1208:  
                                                  1209:  CARRYTENS
0525  1238     BCF 0x38, 0x4                      1210:      bcf tens, 4
0526  1403     BSF STATUS, 0x0                    1211:      bsf STATUS, C
0527  0008     RETURN                             1212:      RETURN
                                                  1213:  
                                                  1214:  Convert1
0528  01BB     CLRF 0x3B                          1215:      clrf run_temp
                                                  1216:  ;save and restore
0529  083F     MOVF 0x3F, W                       1217:      movf signal, w
052A  00BB     MOVWF 0x3B                         1218:      movwf run_temp
052B  3008     MOVLW 0x8                          1219:      movlw 8
052C  00BA     MOVWF 0x3A                         1220:      movwf count_temp
052D  01B9     CLRF 0x39                          1221:      clrf huns
052E  01B8     CLRF 0x38                          1222:      clrf tens
052F  01B7     CLRF 0x37                          1223:      clrf ones
                                                  1224:  
                                                  1225:  BCDADD31
                                                  1226:  
0530  3005     MOVLW 0x5                          1227:      movlw 5
0531  0239     SUBWF 0x39, W                      1228:      subwf huns, 0
0532  1803     BTFSC STATUS, 0x0                  1229:      btfsc STATUS, C
0533  2556     CALL 0x556                         1230:      CALL ADD3HUNS1
                                                  1231:  
0534  3005     MOVLW 0x5                          1232:      movlw 5
0535  0238     SUBWF 0x38, W                      1233:      subwf tens, 0
0536  1803     BTFSC STATUS, 0x0                  1234:      btfsc STATUS, C
0537  2559     CALL 0x559                         1235:      CALL ADD3TENS1
                                                  1236:  
0538  3005     MOVLW 0x5                          1237:      movlw 5
0539  0237     SUBWF 0x37, W                      1238:      subwf ones, 0
053A  1803     BTFSC STATUS, 0x0                  1239:      btfsc STATUS, C
053B  255C     CALL 0x55C                         1240:      CALL ADD3ONES1
                                                  1241:  
053C  03BA     DECF 0x3A, F                       1242:      decf count_temp, 1
053D  1003     BCF STATUS, 0x0                    1243:      bcf STATUS, C
053E  0DBF     RLF 0x3F, F                        1244:      rlf signal, 1
053F  0DB7     RLF 0x37, F                        1245:      rlf ones, 1
0540  1A37     BTFSC 0x37, 0x4                    1246:      btfsc ones,4 ;
0541  255F     CALL 0x55F                         1247:      CALL CARRYONES1
0542  0DB8     RLF 0x38, F                        1248:      rlf tens, 1
                                                  1249:  
0543  1A38     BTFSC 0x38, 0x4                    1250:      btfsc tens,4 ;
0544  2562     CALL 0x562                         1251:      CALL CARRYTENS1
0545  0DB9     RLF 0x39, F                        1252:      rlf huns,1
0546  1003     BCF STATUS, 0x0                    1253:      bcf STATUS, C
                                                  1254:  
0547  083A     MOVF 0x3A, W                       1255:      movf count_temp, 0
0548  1D03     BTFSS STATUS, 0x2                  1256:      btfss STATUS, Z
0549  2D30     GOTO 0x530                         1257:      GOTO BCDADD31
                                                  1258:  
                                                  1259:  
054A  0839     MOVF 0x39, W                       1260:      movf huns, 0 ; add ASCII Offset
054B  3E30     ADDLW 0x30                         1261:      addlw h'30'
054C  24DA     CALL 0x4DA                         1262:      call WR_DATA
                                                  1263:  
054D  0838     MOVF 0x38, W                       1264:      movf tens, 0 ; add ASCII Offset
054E  3E30     ADDLW 0x30                         1265:      addlw h'30'
054F  24DA     CALL 0x4DA                         1266:      call WR_DATA
                                                  1267:  
0550  0837     MOVF 0x37, W                       1268:      movf ones, 0 ; add ASCII Offset
0551  3E30     ADDLW 0x30                         1269:      addlw h'30'
0552  24DA     CALL 0x4DA                         1270:      call WR_DATA
                                                  1271:  
0553  083B     MOVF 0x3B, W                       1272:      movf run_temp, w
0554  00BF     MOVWF 0x3F                         1273:      movwf signal
0555  0008     RETURN                             1274:      RETURN
                                                  1275:  
                                                  1276:  ADD3HUNS1
0556  3003     MOVLW 0x3                          1277:      movlw 3
0557  07B9     ADDWF 0x39, F                      1278:      addwf huns,1
0558  0008     RETURN                             1279:      RETURN
                                                  1280:  
                                                  1281:  ADD3TENS1
0559  3003     MOVLW 0x3                          1282:      movlw 3
055A  07B8     ADDWF 0x38, F                      1283:      addwf tens,1
055B  0008     RETURN                             1284:      RETURN
                                                  1285:  
                                                  1286:  ADD3ONES1
055C  3003     MOVLW 0x3                          1287:      movlw 3
055D  07B7     ADDWF 0x37, F                      1288:      addwf ones,1
055E  0008     RETURN                             1289:      RETURN
                                                  1290:  
                                                  1291:  CARRYONES1
055F  1237     BCF 0x37, 0x4                      1292:      bcf ones, 4
0560  1403     BSF STATUS, 0x0                    1293:      bsf STATUS, C
0561  0008     RETURN                             1294:      RETURN
                                                  1295:  
                                                  1296:  CARRYTENS1
0562  1238     BCF 0x38, 0x4                      1297:      bcf tens, 4
0563  1403     BSF STATUS, 0x0                    1298:      bsf STATUS, C
0564  0008     RETURN                             1299:      RETURN
                                                  1300:  
                                                  1301:  lcdLongDelay
0565  3014     MOVLW 0x14                         1302:      movlw d'20'
0566  00AC     MOVWF 0x2C                         1303:      movwf lcd_d2
                                                  1304:  LLD_LOOP
0567  30FF     MOVLW 0xFF                         1305:      LCD_DELAY
0568  00AB     MOVWF 0x2B
0569  0BAB     DECFSZ 0x2B, F
056A  2D69     GOTO 0x569
056B  0BAC     DECFSZ 0x2C, F                     1306:      decfsz lcd_d2,f
056C  2D67     GOTO 0x567                         1307:      goto LLD_LOOP
056D  0008     RETURN                             1308:      return
                                                  1309:  
                                                  1310:  
                                                  1311:  ISR
                                                  1312:          ;saving registers
056E  00B0     MOVWF 0x30                         1313:          movwf w_temp
056F  0803     MOVF STATUS, W                     1314:          movf STATUS, w
0570  00B1     MOVWF 0x31                         1315:          movwf status_temp
                                                  1316:  
                                                  1317:  Timer
0571  110B     BCF INTCON, 0x2                    1318:          bcf     INTCON, 2
0572  0BB6     DECFSZ 0x36, F                     1319:          decfsz  timercount, f
0573  2D78     GOTO 0x578                         1320:              goto    addsignal
0574  0AB5     INCF 0x35, F                       1321:          incf    runtime, f
0575  3026     MOVLW 0x26                         1322:          movlw   D'38'
0576  00B6     MOVWF 0x36                         1323:          movwf   timercount
0577  2D7D     GOTO 0x57D                         1324:          goto    finish
                                                  1325:  
                                                  1326:  addsignal
0578  1283     BCF STATUS, 0x5                    1327:          banksel PORTB
0579  1303     BCF STATUS, 0x6
057A  1C06     BTFSS PORTB, 0x0                   1328:          btfss   PORTB, 0
057B  2D7D     GOTO 0x57D                         1329:              goto    finish
057C  0ABF     INCF 0x3F, F                       1330:          incf    signal
                                                  1331:  
                                                  1332:  finish
057D  0831     MOVF 0x31, W                       1333:          movf status_temp, w
057E  0083     MOVWF STATUS                       1334:          movwf STATUS
057F  0EB0     SWAPF 0x30, F                      1335:          swapf w_temp, f
0580  0E30     SWAPF 0x30, W                      1336:          swapf w_temp, w
0581  0009     RETFIE                             1337:          retfie
                                                  1338:  
                                                  1339:  write_EE
                                                  1340:  ;write to EEPROM
0582  1283     BCF STATUS, 0x5                    1341:      banksel ADDRL
0583  1303     BCF STATUS, 0x6
0584  083C     MOVF 0x3C, W                       1342:      movf    ADDRL, W ; write address of desired program memory location
0585  1283     BCF STATUS, 0x5                    1343:      banksel EEADR
0586  1703     BSF STATUS, 0x6
0587  008D     MOVWF PIR2                         1344:      movwf   EEADR
                                                  1345:  ;    movf    ADDRH, W
                                                  1346:  ;    movwf   EEADRH
0588  1283     BCF STATUS, 0x5                    1347:      banksel VALUEL
0589  1303     BCF STATUS, 0x6
058A  083E     MOVF 0x3E, W                       1348:      movf    VALUEL, W ; write value to program at desired memory locqation
058B  1283     BCF STATUS, 0x5                    1349:      banksel EEDATA
058C  1703     BSF STATUS, 0x6
058D  008C     MOVWF PIR1                         1350:      movwf   EEDATA
                                                  1351:  ;    movf    VALUEH, W
                                                  1352:  ;    movwf   EEDATH
                                                  1353:  
058E  1683     BSF STATUS, 0x5                    1354:      bsf     STATUS, RP0
058F  178C     BSF PIR1, 0x7                      1355:      bsf     EECON1, EEPGD
0590  150C     BSF PIR1, 0x2                      1356:      bsf     EECON1, WREN
0591  138B     BCF INTCON, 0x7                    1357:      bcf     INTCON, GIE
                                                  1358:  
0592  3055     MOVLW 0x55                         1359:      movlw   0x55
0593  008D     MOVWF PIR2                         1360:      movwf   EECON2
0594  30AA     MOVLW 0xAA                         1361:      movlw   0xaa
0595  008D     MOVWF PIR2                         1362:      movwf   EECON2 ;
0596  148C     BSF PIR1, 0x1                      1363:      bsf     EECON1, WR ; start write operation
0597  0000     NOP                                1364:      nop ;wait for micro
0598  0000     NOP                                1365:      nop
                                                  1366:  
0599  178B     BSF INTCON, 0x7                    1367:      bsf    INTCON, GIE ;re-enable interrupts
059A  110C     BCF PIR1, 0x2                      1368:      bcf    EECON1, WREN ;disables writes
059B  1283     BCF STATUS, 0x5                    1369:      bcf    STATUS, RP0
059C  1303     BCF STATUS, 0x6                    1370:      bcf    STATUS, RP1 
059D  0008     RETURN                             1371:      return
                                                  1372:  
                                                  1373:  write_EES
059E  1283     BCF STATUS, 0x5                    1374:      banksel ADDRL
059F  1303     BCF STATUS, 0x6
05A0  083C     MOVF 0x3C, W                       1375:      movf    ADDRL, W ; write address of desired program memory location
05A1  1283     BCF STATUS, 0x5                    1376:      banksel EEADR
05A2  1703     BSF STATUS, 0x6
05A3  008D     MOVWF PIR2                         1377:      movwf   EEADR
                                                  1378:  
05A4  1683     BSF STATUS, 0x5                    1379:      bsf     STATUS, RP0
05A5  178C     BSF PIR1, 0x7                      1380:      bsf     EECON1, EEPGD
05A6  150C     BSF PIR1, 0x2                      1381:      bsf     EECON1, WREN
05A7  138B     BCF INTCON, 0x7                    1382:      bcf     INTCON, GIE
                                                  1383:  
05A8  3055     MOVLW 0x55                         1384:      movlw   0x55
05A9  008D     MOVWF PIR2                         1385:      movwf   EECON2
05AA  30AA     MOVLW 0xAA                         1386:      movlw   0xaa
05AB  008D     MOVWF PIR2                         1387:      movwf   EECON2 ;
05AC  148C     BSF PIR1, 0x1                      1388:      bsf     EECON1, WR ; start write operation
05AD  0000     NOP                                1389:      nop ;wait for micro
05AE  0000     NOP                                1390:      nop
                                                  1391:  
05AF  178B     BSF INTCON, 0x7                    1392:      bsf    INTCON, GIE ;re-enable interrupts
05B0  110C     BCF PIR1, 0x2                      1393:      bcf    EECON1, WREN ;disables writes
05B1  1283     BCF STATUS, 0x5                    1394:      bcf    STATUS, RP0
05B2  1303     BCF STATUS, 0x6                    1395:      bcf    STATUS, RP1
05B3  0008     RETURN                             1396:      return
                                                  1397:  
                                                  1398:  read_EE
05B4  1283     BCF STATUS, 0x5                    1399:      banksel ADDRL
05B5  1303     BCF STATUS, 0x6
05B6  083C     MOVF 0x3C, W                       1400:      movf   ADDRL, W
05B7  1283     BCF STATUS, 0x5                    1401:      banksel EEADR
05B8  1703     BSF STATUS, 0x6
05B9  008D     MOVWF PIR2                         1402:      movwf   EEADR
05BA  1683     BSF STATUS, 0x5                    1403:      banksel EECON1
05BB  1703     BSF STATUS, 0x6
05BC  178C     BSF PIR1, 0x7                      1404:      bsf     EECON1, EEPGD
05BD  140C     BSF PIR1, 0x0                      1405:      bsf     EECON1, RD
05BE  0000     NOP                                1406:      nop
05BF  0000     NOP                                1407:      nop
05C0  1283     BCF STATUS, 0x5                    1408:      bcf     STATUS, RP0
05C1  080C     MOVF PIR1, W                       1409:      movf    EEDATA, W
05C2  1283     BCF STATUS, 0x5                    1410:      banksel DATAL
05C3  1303     BCF STATUS, 0x6
05C4  00BD     MOVWF 0x3D                         1411:      movwf   DATAL
05C5  1283     BCF STATUS, 0x5                    1412:      bcf     STATUS, RP0
05C6  1303     BCF STATUS, 0x6                    1413:      bcf     STATUS, RP1
05C7  0008     RETURN                             1414:      return
                                                  1415:  
                                                  1416:  shift_EE
                                                  1417:  
                                                  1418:  
                                                  1419:      ;shift 3 to 4
05C8  1283     BCF STATUS, 0x5                    1420:      banksel DATAL
05C9  1303     BCF STATUS, 0x6
05CA  3018     MOVLW 0x18                         1421:      movlw   0x18
05CB  00BC     MOVWF 0x3C                         1422:      movwf   ADDRL
05CC  25B4     CALL 0x5B4                         1423:      call    read_EE
05CD  301C     MOVLW 0x1C                         1424:      movlw   0x1c
05CE  00BC     MOVWF 0x3C                         1425:      movwf   ADDRL
05CF  259E     CALL 0x59E                         1426:      call    write_EES
                                                  1427:  
05D0  3019     MOVLW 0x19                         1428:      movlw   0x19
05D1  00BC     MOVWF 0x3C                         1429:      movwf   ADDRL
05D2  25B4     CALL 0x5B4                         1430:      call    read_EE
05D3  301D     MOVLW 0x1D                         1431:      movlw   0x1d
05D4  00BC     MOVWF 0x3C                         1432:      movwf   ADDRL
05D5  259E     CALL 0x59E                         1433:      call    write_EES
                                                  1434:  
05D6  301A     MOVLW 0x1A                         1435:      movlw   0x1a
05D7  00BC     MOVWF 0x3C                         1436:      movwf   ADDRL
05D8  25B4     CALL 0x5B4                         1437:      call    read_EE
05D9  301E     MOVLW 0x1E                         1438:      movlw   0x1e
05DA  00BC     MOVWF 0x3C                         1439:      movwf   ADDRL
05DB  259E     CALL 0x59E                         1440:      call    write_EES
                                                  1441:  
05DC  301B     MOVLW 0x1B                         1442:      movlw   0x1b
05DD  00BC     MOVWF 0x3C                         1443:      movwf   ADDRL
05DE  25B4     CALL 0x5B4                         1444:      call    read_EE
05DF  301F     MOVLW 0x1F                         1445:      movlw   0x1f
05E0  00BC     MOVWF 0x3C                         1446:      movwf   ADDRL
05E1  259E     CALL 0x59E                         1447:      call    write_EES
                                                  1448:  
                                                  1449:      ;shift 2 to 3
05E2  1283     BCF STATUS, 0x5                    1450:      banksel DATAL
05E3  1303     BCF STATUS, 0x6
05E4  3014     MOVLW 0x14                         1451:      movlw   0x14
05E5  00BC     MOVWF 0x3C                         1452:      movwf   ADDRL
05E6  25B4     CALL 0x5B4                         1453:      call    read_EE
05E7  3018     MOVLW 0x18                         1454:      movlw   0x18
05E8  00BC     MOVWF 0x3C                         1455:      movwf   ADDRL
05E9  259E     CALL 0x59E                         1456:      call    write_EES
                                                  1457:  
05EA  3015     MOVLW 0x15                         1458:      movlw   0x15
05EB  00BC     MOVWF 0x3C                         1459:      movwf   ADDRL
05EC  25B4     CALL 0x5B4                         1460:      call    read_EE
05ED  3019     MOVLW 0x19                         1461:      movlw   0x19
05EE  00BC     MOVWF 0x3C                         1462:      movwf   ADDRL
05EF  259E     CALL 0x59E                         1463:      call    write_EES
                                                  1464:  
05F0  3016     MOVLW 0x16                         1465:      movlw   0x16
05F1  00BC     MOVWF 0x3C                         1466:      movwf   ADDRL
05F2  25B4     CALL 0x5B4                         1467:      call    read_EE
05F3  301A     MOVLW 0x1A                         1468:      movlw   0x1a
05F4  00BC     MOVWF 0x3C                         1469:      movwf   ADDRL
05F5  259E     CALL 0x59E                         1470:      call    write_EES
                                                  1471:  
05F6  3017     MOVLW 0x17                         1472:      movlw   0x17
05F7  00BC     MOVWF 0x3C                         1473:      movwf   ADDRL
05F8  25B4     CALL 0x5B4                         1474:      call    read_EE
05F9  301B     MOVLW 0x1B                         1475:      movlw   0x1b
05FA  00BC     MOVWF 0x3C                         1476:      movwf   ADDRL
05FB  259E     CALL 0x59E                         1477:      call    write_EES
                                                  1478:  
                                                  1479:      ;shift 1 to 2
05FC  1283     BCF STATUS, 0x5                    1480:      banksel DATAL
05FD  1303     BCF STATUS, 0x6
05FE  3010     MOVLW 0x10                         1481:      movlw   0x10
05FF  00BC     MOVWF 0x3C                         1482:      movwf   ADDRL
0600  25B4     CALL 0x5B4                         1483:      call    read_EE
0601  3014     MOVLW 0x14                         1484:      movlw   0x14
0602  00BC     MOVWF 0x3C                         1485:      movwf   ADDRL
0603  259E     CALL 0x59E                         1486:      call    write_EES
                                                  1487:  
0604  3011     MOVLW 0x11                         1488:      movlw   0x11
0605  00BC     MOVWF 0x3C                         1489:      movwf   ADDRL
0606  25B4     CALL 0x5B4                         1490:      call    read_EE
0607  3015     MOVLW 0x15                         1491:      movlw   0x15
0608  00BC     MOVWF 0x3C                         1492:      movwf   ADDRL
0609  259E     CALL 0x59E                         1493:      call    write_EES
                                                  1494:  
060A  3012     MOVLW 0x12                         1495:      movlw   0x12
060B  00BC     MOVWF 0x3C                         1496:      movwf   ADDRL
060C  25B4     CALL 0x5B4                         1497:      call    read_EE
060D  3016     MOVLW 0x16                         1498:      movlw   0x16
060E  00BC     MOVWF 0x3C                         1499:      movwf   ADDRL
060F  259E     CALL 0x59E                         1500:      call    write_EES
                                                  1501:  
0610  3013     MOVLW 0x13                         1502:      movlw   0x13
0611  00BC     MOVWF 0x3C                         1503:      movwf   ADDRL
0612  25B4     CALL 0x5B4                         1504:      call    read_EE
0613  3017     MOVLW 0x17                         1505:      movlw   0x17
0614  00BC     MOVWF 0x3C                         1506:      movwf   ADDRL
0615  259E     CALL 0x59E                         1507:      call    write_EES
                                                  1508:  
0616  0008     RETURN                             1509:      return
                                                  1510:  
0617  1683     BSF STATUS, 0x5                    1511:  pc_init bsf       STATUS,RP0     ; select bank 1
0618  0188     CLRF PORTD                         1512:          clrf      TRISD
                                                  1513:  
                                                  1514:          ;Setup USART for RS232
0619  300F     MOVLW 0xF                          1515:          movlw     d'15'          ; BAUD rate 9600, assuming 10MHz oscillator
061A  0099     MOVWF TXREG                        1516:          movwf     SPBRG
061B  0198     CLRF RCSTA                         1517:          clrf      TXSTA          ; 8 bits data ,no,1 stop
                                                  1518:  
061C  1283     BCF STATUS, 0x5                    1519:          bcf       STATUS,RP0     ; select bank 0
061D  1798     BSF RCSTA, 0x7                     1520:          bsf       RCSTA,SPEN     ; Asynchronous serial port enable
061E  1618     BSF RCSTA, 0x4                     1521:          bsf       RCSTA,CREN     ; continuous receive
                                                  1522:  
061F  1683     BSF STATUS, 0x5                    1523:          bsf       STATUS,RP0     ; select bank 1
0620  1698     BSF RCSTA, 0x5                     1524:          bsf       TXSTA,TXEN     ; Transmit enable
0621  1283     BCF STATUS, 0x5                    1525:          bcf       STATUS,RP0     ; select bank 0
                                                  1526:  
0622  0008     RETURN                             1527:          return
                                                  1528:  
                                                  1529:  wrt_char
0623  1283     BCF STATUS, 0x5                    1530:          bcf     STATUS, RP0
0624  0099     MOVWF TXREG                        1531:          movwf     TXREG
0625  1683     BSF STATUS, 0x5                    1532:          bsf       STATUS,RP0     ; Go to bank with TXSTA
0626  1C98     BTFSS RCSTA, 0x1                   1533:          btfss     TXSTA,1        ; check TRMT bit in TXSTA (FSR) until TRMT=1
0627  2E26     GOTO 0x626                         1534:          goto      $-1
0628  1283     BCF STATUS, 0x5                    1535:          bcf     STATUS, RP0
0629  0008     RETURN                             1536:          return
                                                  1537:  
                                                  1538:  
                                                  1539:  display_num
062A  084F     MOVF 0x4F, W                       1540:          movf    val,w
062B  390F     ANDLW 0xF                          1541:          andlw   0x0f           ; w  = 0000 LLLL
062C  3E30     ADDLW 0x30                         1542:          addlw   0x30           ; convert to ASCII
062D  1283     BCF STATUS, 0x5                    1543:          bcf     STATUS, RP0
062E  0099     MOVWF TXREG                        1544:          movwf     TXREG
062F  1683     BSF STATUS, 0x5                    1545:          bsf       STATUS,RP0     ; Go to bank with TXSTA
0630  1C98     BTFSS RCSTA, 0x1                   1546:          btfss     TXSTA,1        ; check TRMT bit in TXSTA (FSR) until TRMT=1
0631  2E30     GOTO 0x630                         1547:          goto      $-1
0632  1283     BCF STATUS, 0x5                    1548:          banksel val
0633  1303     BCF STATUS, 0x6
0634  0008     RETURN                             1549:      	return
                                                  1550:  
                                                  1551:  pc_log
                                                  1552:  
                                                  1553:  		;Get year
0635  3032     MOVLW 0x32                         1554:  		movlw	"2"				;First line shows 20**/**/**
0636  2623     CALL 0x623                         1555:  		call	wrt_char
0637  3030     MOVLW 0x30                         1556:  		movlw	"0"
0638  2623     CALL 0x623                         1557:  		call	wrt_char
                                                  1558:  
0639  3006     MOVLW 0x6                          1559:  		rtc_read	0x06		;Read Address 0x06 from DS1307---year
063A  1283     BCF STATUS, 0x5
063B  1303     BCF STATUS, 0x6
063C  00F3     MOVWF com
063D  2711     CALL 0x711
063E  1283     BCF STATUS, 0x5
063F  1303     BCF STATUS, 0x6
0640  0875     MOVF 0x75, W
0641  2760     CALL 0x760
0642  1283     BCF STATUS, 0x5                    1560:          banksel   val
0643  1303     BCF STATUS, 0x6
0644  0877     MOVF 0x77, W                       1561:          movf      0x77, w
0645  00CF     MOVWF 0x4F                         1562:          movwf     val
0646  262A     CALL 0x62A                         1563:          call      display_num
0647  0878     MOVF 0x78, W                       1564:          movf      0x78, w
0648  00CF     MOVWF 0x4F                         1565:          movwf     val
0649  262A     CALL 0x62A                         1566:          call      display_num
064A  302F     MOVLW 0x2F                         1567:  		movlw	"/"
064B  2623     CALL 0x623                         1568:  		call	wrt_char
                                                  1569:  
                                                  1570:  		;Get month
064C  3005     MOVLW 0x5                          1571:  		rtc_read	0x05		;Read Address 0x05 from DS1307---month
064D  1283     BCF STATUS, 0x5
064E  1303     BCF STATUS, 0x6
064F  00F3     MOVWF com
0650  2711     CALL 0x711
0651  1283     BCF STATUS, 0x5
0652  1303     BCF STATUS, 0x6
0653  0875     MOVF 0x75, W
0654  2760     CALL 0x760
0655  0877     MOVF 0x77, W                       1572:          movf      0x77, w
0656  00CF     MOVWF 0x4F                         1573:          movwf     val
0657  262A     CALL 0x62A                         1574:          call      display_num
0658  0878     MOVF 0x78, W                       1575:          movf      0x78, w
0659  00CF     MOVWF 0x4F                         1576:          movwf     val
065A  262A     CALL 0x62A                         1577:          call      display_num
                                                  1578:  
065B  302F     MOVLW 0x2F                         1579:  		movlw	"/"
065C  2623     CALL 0x623                         1580:          call	wrt_char
                                                  1581:  
                                                  1582:  		;Get day
065D  3004     MOVLW 0x4                          1583:  		rtc_read	0x04		;Read Address 0x04 from DS1307---day
065E  1283     BCF STATUS, 0x5
065F  1303     BCF STATUS, 0x6
0660  00F3     MOVWF com
0661  2711     CALL 0x711
0662  1283     BCF STATUS, 0x5
0663  1303     BCF STATUS, 0x6
0664  0875     MOVF 0x75, W
0665  2760     CALL 0x760
0666  0877     MOVF 0x77, W                       1584:          movf      0x77, w
0667  00CF     MOVWF 0x4F                         1585:          movwf     val
0668  262A     CALL 0x62A                         1586:          call      display_num
0669  0878     MOVF 0x78, W                       1587:          movf      0x78, w
066A  00CF     MOVWF 0x4F                         1588:          movwf     val
066B  262A     CALL 0x62A                         1589:          call      display_num
                                                  1590:  
066C  3020     MOVLW 0x20                         1591:          movlw     " "
066D  2623     CALL 0x623                         1592:          call    wrt_char
                                                  1593:  
                                                  1594:  		;Get hour
066E  3002     MOVLW 0x2                          1595:  		rtc_read	0x02
066F  1283     BCF STATUS, 0x5
0670  1303     BCF STATUS, 0x6
0671  00F3     MOVWF com
0672  2711     CALL 0x711
0673  1283     BCF STATUS, 0x5
0674  1303     BCF STATUS, 0x6
0675  0875     MOVF 0x75, W
0676  2760     CALL 0x760
0677  0877     MOVF 0x77, W                       1596:          movf      0x77, w
0678  00CF     MOVWF 0x4F                         1597:          movwf     val
0679  262A     CALL 0x62A                         1598:          call      display_num
067A  0878     MOVF 0x78, W                       1599:          movf      0x78, w
067B  00CF     MOVWF 0x4F                         1600:          movwf     val
067C  262A     CALL 0x62A                         1601:          call      display_num
067D  303A     MOVLW 0x3A                         1602:  		movlw	":"
067E  2623     CALL 0x623                         1603:  		call	wrt_char
                                                  1604:  
                                                  1605:  		;Get minute
067F  3001     MOVLW 0x1                          1606:  		rtc_read	0x01		;Read Address 0x01 from DS1307---min
0680  1283     BCF STATUS, 0x5
0681  1303     BCF STATUS, 0x6
0682  00F3     MOVWF com
0683  2711     CALL 0x711
0684  1283     BCF STATUS, 0x5
0685  1303     BCF STATUS, 0x6
0686  0875     MOVF 0x75, W
0687  2760     CALL 0x760
0688  0877     MOVF 0x77, W                       1607:          movf      0x77, w
0689  00CF     MOVWF 0x4F                         1608:          movwf     val
068A  262A     CALL 0x62A                         1609:          call      display_num
068B  0878     MOVF 0x78, W                       1610:          movf      0x78, w
068C  00CF     MOVWF 0x4F                         1611:          movwf     val
068D  262A     CALL 0x62A                         1612:          call      display_num
                                                  1613:  
                                                  1614:  
068E  26BF     CALL 0x6BF                         1615:          call      next_line
                                                  1616:  
068F  3050     MOVLW 0x50                         1617:          movlw     "P"
0690  2623     CALL 0x623                         1618:          call    wrt_char
0691  303A     MOVLW 0x3A                         1619:          movlw     ":"
0692  2623     CALL 0x623                         1620:          call    wrt_char
                                                  1621:  
0693  1283     BCF STATUS, 0x5                    1622:          banksel   val
0694  1303     BCF STATUS, 0x6
0695  0832     MOVF 0x32, W                       1623:          movf      pass, w
0696  00CF     MOVWF 0x4F                         1624:          movwf     val
0697  262A     CALL 0x62A                         1625:          call      display_num
                                                  1626:  
0698  3020     MOVLW 0x20                         1627:          movlw     " "
0699  2623     CALL 0x623                         1628:          call    wrt_char
                                                  1629:  
069A  3046     MOVLW 0x46                         1630:          movlw     "F"
069B  2623     CALL 0x623                         1631:          call    wrt_char
                                                  1632:  
069C  3046     MOVLW 0x46                         1633:          movlw     "F"
069D  2623     CALL 0x623                         1634:          call    wrt_char
                                                  1635:  
069E  303A     MOVLW 0x3A                         1636:          movlw     ":"
069F  2623     CALL 0x623                         1637:          call    wrt_char
                                                  1638:  
06A0  1283     BCF STATUS, 0x5                    1639:          banksel   val
06A1  1303     BCF STATUS, 0x6
06A2  0833     MOVF 0x33, W                       1640:          movf      flickerfail, w
06A3  00CF     MOVWF 0x4F                         1641:          movwf     val
06A4  262A     CALL 0x62A                         1642:          call      display_num
                                                  1643:  
06A5  3020     MOVLW 0x20                         1644:          movlw     " "
06A6  2623     CALL 0x623                         1645:          call    wrt_char
                                                  1646:  
06A7  304C     MOVLW 0x4C                         1647:          movlw     "L"
06A8  2623     CALL 0x623                         1648:          call    wrt_char
                                                  1649:  
06A9  3046     MOVLW 0x46                         1650:          movlw     "F"
06AA  2623     CALL 0x623                         1651:          call    wrt_char
                                                  1652:  
06AB  303A     MOVLW 0x3A                         1653:          movlw     ":"
06AC  2623     CALL 0x623                         1654:          call    wrt_char
                                                  1655:  
06AD  1283     BCF STATUS, 0x5                    1656:          banksel   val
06AE  1303     BCF STATUS, 0x6
06AF  0834     MOVF 0x34, W                       1657:          movf      ledfail, w
06B0  00CF     MOVWF 0x4F                         1658:          movwf     val
06B1  262A     CALL 0x62A                         1659:          call      display_num
                                                  1660:  
06B2  3020     MOVLW 0x20                         1661:          movlw     " "
06B3  2623     CALL 0x623                         1662:          call    wrt_char
                                                  1663:  
06B4  304E     MOVLW 0x4E                         1664:          movlw     "N"
06B5  2623     CALL 0x623                         1665:          call    wrt_char
                                                  1666:  
06B6  303A     MOVLW 0x3A                         1667:          movlw     ":"
06B7  2623     CALL 0x623                         1668:          call    wrt_char
                                                  1669:  
06B8  1283     BCF STATUS, 0x5                    1670:          banksel   val
06B9  1303     BCF STATUS, 0x6
06BA  0840     MOVF 0x40, W                       1671:          movf      none, w
06BB  00CF     MOVWF 0x4F                         1672:          movwf     val
06BC  262A     CALL 0x62A                         1673:          call      display_num
                                                  1674:  
06BD  26BF     CALL 0x6BF                         1675:          call      next_line
                                                  1676:  
06BE  0008     RETURN                             1677:          return
                                                  1678:  
                                                  1679:  next_line
06BF  300A     MOVLW 0xA                          1680:          movlw     H'0A'
06C0  2623     CALL 0x623                         1681:          call    wrt_char
06C1  300D     MOVLW 0xD                          1682:          movlw     H'0D'
06C2  2623     CALL 0x623                         1683:          call    wrt_char
                                                  1684:  
06C3  0008     RETURN                             1685:  return
                                                  1686:  
                                                  1687:  
2007  0000     NOP                                1688:  END
---  /Users/Judy/MPLABXProjects/Interface16.X/i2c_common.asm  -------------------------------------------
                                                  1:         include <p16f877.inc>
                                                  2:     	errorlevel	-302
                                                  3:     	errorlevel	-305
                                                  4:     
                                                  5:     ;global labels
                                                  6:     
                                                  7:     	global	write_rtc,read_rtc,rtc_convert,i2c_common_setup,p2p_write,p2p_read
                                                  8:     
                                                  9:     ;Definition and variable declarations;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                                  10:            cblock    0x71			;these variable names are for reference only. The following
                                                  11:            dt1			;0x71		 addresses are used for the RTC module
                                                  12:            dt2			;0x72
                                                  13:            ADD			;0x73
                                                  14:            DAT			;0x74
                                                  15:            DOUT		;0x75
                                                  16:            B1			;0x76
                                                  17:    		dig10		;0x77
                                                  18:    		dig1		;0x78
                                                  19:            endc
                                                  20:    
                                                  21:    ;I2C lowest layer macros;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                                  22:    
                                                  23:    i2c_common_check_ack	macro	err_address		;If bad ACK bit received, goto err_address
                                                  24:    	banksel		SSPCON2
                                                  25:        btfsc       SSPCON2,ACKSTAT
                                                  26:        goto        err_address
                                                  27:    	endm
                                                  28:    
                                                  29:    i2c_common_start	macro
                                                  30:    ;input:		none
                                                  31:    ;output:	none
                                                  32:    ;desc:		initiate start conditionon the bus
                                                  33:    	banksel     SSPCON2
                                                  34:        bsf         SSPCON2,SEN
                                                  35:        btfsc       SSPCON2,SEN
                                                  36:        goto        $-1
                                                  37:    	endm
                                                  38:    
                                                  39:    i2c_common_stop	macro
                                                  40:    ;input: 	none
                                                  41:    ;output:	none
                                                  42:    ;desc:		initiate stop condition on the bus
                                                  43:    	banksel     SSPCON2
                                                  44:        bsf         SSPCON2,PEN
                                                  45:        btfsc       SSPCON2,PEN
                                                  46:        goto        $-1
                                                  47:    	endm
                                                  48:    
                                                  49:    i2c_common_repeatedstart	macro
                                                  50:    ;input:		none
                                                  51:    ;output:	none
                                                  52:    ;desc:		initiate repeated start on the bus. Usually used for
                                                  53:    ;			changing direction of SDA without STOP event
                                                  54:    	banksel     SSPCON2
                                                  55:        bsf         SSPCON2,RSEN
                                                  56:        btfsc       SSPCON2,RSEN
                                                  57:        goto        $-1
                                                  58:    	endm
                                                  59:    
                                                  60:    i2c_common_ack		macro
                                                  61:    ;input:		none
                                                  62:    ;output:	none
                                                  63:    ;desc:		send an acknowledge to slave device
                                                  64:        banksel     SSPCON2
                                                  65:        bcf         SSPCON2,ACKDT
                                                  66:        bsf         SSPCON2,ACKEN
                                                  67:        btfsc       SSPCON2,ACKEN
                                                  68:        goto        $-1
                                                  69:        endm
                                                  70:    
                                                  71:    i2c_common_nack	macro
                                                  72:    ;input:		none
                                                  73:    ;output:	none
                                                  74:    ;desc:		send an not acknowledge to slave device
                                                  75:       banksel     SSPCON2
                                                  76:       bsf         SSPCON2,ACKDT
                                                  77:       bsf         SSPCON2,ACKEN
                                                  78:       btfsc       SSPCON2,ACKEN
                                                  79:       goto        $-1
                                                  80:       endm
                                                  81:    
                                                  82:    i2c_common_write	macro
                                                  83:    ;input:		W
                                                  84:    ;output:	to slave device
                                                  85:    ;desc:		writes W to SSPBUF and send to slave device. Make sure
                                                  86:    ;			transmit is finished before continuing
                                                  87:       banksel     SSPBUF
                                                  88:       movwf       SSPBUF
                                                  89:       banksel     SSPSTAT
                                                  90:       btfsc       SSPSTAT,R_W 		;While transmit is in progress, wait
                                                  91:       goto        $-1
                                                  92:       banksel     SSPCON2
                                                  93:       endm
                                                  94:    
                                                  95:    i2c_common_read	macro
                                                  96:    ;input:		none
                                                  97:    ;output:	W
                                                  98:    ;desc:		reads data from slave and saves it in W.
                                                  99:       banksel     SSPCON2
                                                  100:      bsf         SSPCON2,RCEN    ;Begin receiving byte from
                                                  101:      btfsc       SSPCON2,RCEN
                                                  102:      goto        $-1
                                                  103:      banksel     SSPBUF
                                                  104:      movf        SSPBUF,w
                                                  105:      endm
                                                  106:   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                                  107:   
                                                  108:   	code
                                                  109:   
                                                  110:   i2c_common_setup
                                                  111:   ;input:		none
                                                  112:   ;output:	none
                                                  113:   ;desc:		sets up I2C as master device with 100kHz baud rate
06C4  1683     BSF STATUS, 0x5                    114:   	banksel		SSPSTAT
06C5  1303     BCF STATUS, 0x6
06C6  0194     CLRF SSPCON                        115:       clrf        SSPSTAT         ;I2C line levels, and clear all flags
06C7  3018     MOVLW 0x18                         116:       movlw       d'24'         	;100kHz baud rate: 10MHz osc / [4*(24+1)]
06C8  1683     BSF STATUS, 0x5                    117:   	banksel		SSPADD
06C9  1303     BCF STATUS, 0x6
06CA  0093     MOVWF SSPBUF                       118:       movwf       SSPADD          ;RTC only supports 100kHz
                                                  119:   
06CB  3008     MOVLW 0x8                          120:       movlw       b'00001000'     ;Config SSP for Master Mode I2C
06CC  1283     BCF STATUS, 0x5                    121:   	banksel		SSPCON
06CD  1303     BCF STATUS, 0x6
06CE  0094     MOVWF SSPCON                       122:       movwf       SSPCON
06CF  1694     BSF SSPCON, 0x5                    123:       bsf         SSPCON,SSPEN    ;Enable SSP module
06D0  1683     BSF STATUS, 0x5                    124:       i2c_common_stop        		;Ensure the bus is free
06D1  1303     BCF STATUS, 0x6
06D2  1511     BSF TMR2, 0x2
06D3  1911     BTFSC TMR2, 0x2
06D4  2ED3     GOTO 0x6D3
06D5  0008     RETURN                             125:   	return
                                                  126:   
                                                  127:   ;rtc Algorithms;;;;;;
                                                  128:   
                                                  129:   write_rtc
                                                  130:   ;input:		address of register in RTC
                                                  131:   ;output:	none
                                                  132:   ;Desc:		handles writing data to RTC
                                                  133:           ;Select the DS1307 on the bus, in WRITE mode
06D6  1683     BSF STATUS, 0x5                    134:           i2c_common_start
06D7  1303     BCF STATUS, 0x6
06D8  1411     BSF TMR2, 0x0
06D9  1811     BTFSC TMR2, 0x0
06DA  2ED9     GOTO 0x6D9
06DB  30D0     MOVLW 0xD0                         135:           movlw       0xD0        ;DS1307 address | WRITE bit
06DC  1283     BCF STATUS, 0x5                    136:           i2c_common_write
06DD  1303     BCF STATUS, 0x6
06DE  0093     MOVWF SSPBUF
06DF  1683     BSF STATUS, 0x5
06E0  1303     BCF STATUS, 0x6
06E1  1914     BTFSC SSPCON, 0x2
06E2  2EE1     GOTO 0x6E1
06E3  1683     BSF STATUS, 0x5
06E4  1303     BCF STATUS, 0x6
06E5  1683     BSF STATUS, 0x5                    137:           i2c_common_check_ack   WR_ERR
06E6  1303     BCF STATUS, 0x6
06E7  1B11     BTFSC TMR2, 0x6
06E8  2F0A     GOTO 0x70A
                                                  138:   
                                                  139:           ;Write data to I2C bus (Register Address in RTC)
06E9  1283     BCF STATUS, 0x5                    140:   		banksel		0x73
06EA  1303     BCF STATUS, 0x6
06EB  0873     MOVF 0x73, W                       141:           movf        0x73,w       ;Set register pointer in RTC
06EC  1283     BCF STATUS, 0x5                    142:           i2c_common_write
06ED  1303     BCF STATUS, 0x6
06EE  0093     MOVWF SSPBUF
06EF  1683     BSF STATUS, 0x5
06F0  1303     BCF STATUS, 0x6
06F1  1914     BTFSC SSPCON, 0x2
06F2  2EF1     GOTO 0x6F1
06F3  1683     BSF STATUS, 0x5
06F4  1303     BCF STATUS, 0x6
06F5  1683     BSF STATUS, 0x5                    143:           i2c_common_check_ack   WR_ERR
06F6  1303     BCF STATUS, 0x6
06F7  1B11     BTFSC TMR2, 0x6
06F8  2F0A     GOTO 0x70A
                                                  144:   
                                                  145:           ;Write data to I2C bus (Data to be placed in RTC register)
06F9  1283     BCF STATUS, 0x5                    146:   		banksel		0x74
06FA  1303     BCF STATUS, 0x6
06FB  0874     MOVF 0x74, W                       147:           movf        0x74,w       ;Write data to register in RTC
06FC  1283     BCF STATUS, 0x5                    148:           i2c_common_write
06FD  1303     BCF STATUS, 0x6
06FE  0093     MOVWF SSPBUF
06FF  1683     BSF STATUS, 0x5
0700  1303     BCF STATUS, 0x6
0701  1914     BTFSC SSPCON, 0x2
0702  2F01     GOTO 0x701
0703  1683     BSF STATUS, 0x5
0704  1303     BCF STATUS, 0x6
0705  1683     BSF STATUS, 0x5                    149:           i2c_common_check_ack   WR_ERR
0706  1303     BCF STATUS, 0x6
0707  1B11     BTFSC TMR2, 0x6
0708  2F0A     GOTO 0x70A
0709  2F0B     GOTO 0x70B                         150:           goto        WR_END
                                                  151:   WR_ERR
070A  0000     NOP                                152:           nop
                                                  153:   WR_END
070B  1683     BSF STATUS, 0x5                    154:   		i2c_common_stop	;Release the I2C bus
070C  1303     BCF STATUS, 0x6
070D  1511     BSF TMR2, 0x2
070E  1911     BTFSC TMR2, 0x2
070F  2F0E     GOTO 0x70E
0710  0008     RETURN                             155:           return
                                                  156:   
                                                  157:   read_rtc
                                                  158:   ;input:		address of RTC
                                                  159:   ;output:	DOUT or 0x75
                                                  160:   ;Desc:		This reads from the selected address of the RTC
                                                  161:   ;			and saves it into DOUT or address 0x75
                                                  162:           ;Select the DS1307 on the bus, in WRITE mode
0711  1683     BSF STATUS, 0x5                    163:           i2c_common_start
0712  1303     BCF STATUS, 0x6
0713  1411     BSF TMR2, 0x0
0714  1811     BTFSC TMR2, 0x0
0715  2F14     GOTO 0x714
0716  30D0     MOVLW 0xD0                         164:           movlw       0xD0        ;DS1307 address | WRITE bit
0717  1283     BCF STATUS, 0x5                    165:           i2c_common_write
0718  1303     BCF STATUS, 0x6
0719  0093     MOVWF SSPBUF
071A  1683     BSF STATUS, 0x5
071B  1303     BCF STATUS, 0x6
071C  1914     BTFSC SSPCON, 0x2
071D  2F1C     GOTO 0x71C
071E  1683     BSF STATUS, 0x5
071F  1303     BCF STATUS, 0x6
0720  1683     BSF STATUS, 0x5                    166:           i2c_common_check_ack   RD_ERR
0721  1303     BCF STATUS, 0x6
0722  1B11     BTFSC TMR2, 0x6
0723  2F59     GOTO 0x759
                                                  167:   
                                                  168:           ;Write data to I2C bus (Register Address in RTC)
0724  1283     BCF STATUS, 0x5                    169:   		banksel		0x73
0725  1303     BCF STATUS, 0x6
0726  0873     MOVF 0x73, W                       170:           movf        0x73,w       ;Set register pointer in RTC
0727  1283     BCF STATUS, 0x5                    171:           i2c_common_write
0728  1303     BCF STATUS, 0x6
0729  0093     MOVWF SSPBUF
072A  1683     BSF STATUS, 0x5
072B  1303     BCF STATUS, 0x6
072C  1914     BTFSC SSPCON, 0x2
072D  2F2C     GOTO 0x72C
072E  1683     BSF STATUS, 0x5
072F  1303     BCF STATUS, 0x6
0730  1683     BSF STATUS, 0x5                    172:           i2c_common_check_ack   RD_ERR
0731  1303     BCF STATUS, 0x6
0732  1B11     BTFSC TMR2, 0x6
0733  2F59     GOTO 0x759
                                                  173:   
                                                  174:           ;Re-Select the DS1307 on the bus, in READ mode
0734  1683     BSF STATUS, 0x5                    175:           i2c_common_repeatedstart
0735  1303     BCF STATUS, 0x6
0736  1491     BSF TMR2, 0x1
0737  1891     BTFSC TMR2, 0x1
0738  2F37     GOTO 0x737
0739  30D1     MOVLW 0xD1                         176:           movlw       0xD1        ;DS1307 address | READ bit
073A  1283     BCF STATUS, 0x5                    177:           i2c_common_write
073B  1303     BCF STATUS, 0x6
073C  0093     MOVWF SSPBUF
073D  1683     BSF STATUS, 0x5
073E  1303     BCF STATUS, 0x6
073F  1914     BTFSC SSPCON, 0x2
0740  2F3F     GOTO 0x73F
0741  1683     BSF STATUS, 0x5
0742  1303     BCF STATUS, 0x6
0743  1683     BSF STATUS, 0x5                    178:           i2c_common_check_ack   RD_ERR
0744  1303     BCF STATUS, 0x6
0745  1B11     BTFSC TMR2, 0x6
0746  2F59     GOTO 0x759
                                                  179:   
                                                  180:           ;Read data from I2C bus (Contents of Register in RTC)
0747  1683     BSF STATUS, 0x5                    181:           i2c_common_read
0748  1303     BCF STATUS, 0x6
0749  1591     BSF TMR2, 0x3
074A  1991     BTFSC TMR2, 0x3
074B  2F4A     GOTO 0x74A
074C  1283     BCF STATUS, 0x5
074D  1303     BCF STATUS, 0x6
074E  0813     MOVF SSPBUF, W
074F  1283     BCF STATUS, 0x5                    182:   		banksel		0x75
0750  1303     BCF STATUS, 0x6
0751  00F5     MOVWF 0x75                         183:           movwf       0x75
0752  1683     BSF STATUS, 0x5                    184:           i2c_common_nack      ;Send acknowledgement of data reception
0753  1303     BCF STATUS, 0x6
0754  1691     BSF TMR2, 0x5
0755  1611     BSF TMR2, 0x4
0756  1A11     BTFSC TMR2, 0x4
0757  2F56     GOTO 0x756
                                                  185:   
0758  2F5A     GOTO 0x75A                         186:           goto        RD_END
                                                  187:   
                                                  188:   RD_ERR
0759  0000     NOP                                189:           nop
                                                  190:   
                                                  191:           ;Release the I2C bus
075A  1683     BSF STATUS, 0x5                    192:   RD_END  i2c_common_stop
075B  1303     BCF STATUS, 0x6
075C  1511     BSF TMR2, 0x2
075D  1911     BTFSC TMR2, 0x2
075E  2F5D     GOTO 0x75D
075F  0008     RETURN                             193:           return
                                                  194:   
                                                  195:   rtc_convert
                                                  196:   ;input:		W
                                                  197:   ;output:	dig10 (0x77), dig1 (0x78)
                                                  198:   ;desc:		This subroutine converts the binary number
                                                  199:   ;			in W into a two digit ASCII number and place
                                                  200:   ;			each digit into the corresponding registers
                                                  201:   ;			dig10 or dig1
0760  1283     BCF STATUS, 0x5                    202:   	banksel	0x76
0761  1303     BCF STATUS, 0x6
0762  00F6     MOVWF 0x76                         203:   	movwf   0x76             ; B1 = HHHH LLLL
0763  0E76     SWAPF 0x76, W                      204:       swapf   0x76,w           ; W  = LLLL HHHH
0764  390F     ANDLW 0xF                          205:       andlw   0x0f           ; Mask upper four bits 0000 HHHH
0765  3E30     ADDLW 0x30                         206:       addlw   0x30           ; convert to ASCII
0766  00F7     MOVWF 0x77                         207:       movwf	0x77		   ;saves into 10ths digit
                                                  208:   
0767  1283     BCF STATUS, 0x5                    209:   	banksel	0x76
0768  1303     BCF STATUS, 0x6
0769  0876     MOVF 0x76, W                       210:       movf    0x76,w
076A  390F     ANDLW 0xF                          211:       andlw   0x0f           ; w  = 0000 LLLL
076B  3E30     ADDLW 0x30                         212:       addlw   0x30           ; convert to ASCII
076C  00F8     MOVWF 0x78                         213:       movwf	0x78	       ; saves into 1s digit
076D  0008     RETURN                             214:      	return
                                                  215:   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                                  216:   
                                                  217:   
                                                  218:   ;pic to pic subroutines;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                                  219:   p2p_write
                                                  220:           ;Select the DS1307 on the bus, in WRITE mode
076E  1683     BSF STATUS, 0x5                    221:           i2c_common_start
076F  1303     BCF STATUS, 0x6
0770  1411     BSF TMR2, 0x0
0771  1811     BTFSC TMR2, 0x0
0772  2F71     GOTO 0x771
0773  3010     MOVLW 0x10                         222:           movlw       b'00010000'
0774  1283     BCF STATUS, 0x5                    223:           i2c_common_write
0775  1303     BCF STATUS, 0x6
0776  0093     MOVWF SSPBUF
0777  1683     BSF STATUS, 0x5
0778  1303     BCF STATUS, 0x6
0779  1914     BTFSC SSPCON, 0x2
077A  2F79     GOTO 0x779
077B  1683     BSF STATUS, 0x5
077C  1303     BCF STATUS, 0x6
077D  1683     BSF STATUS, 0x5                    224:           i2c_common_check_ack   W_END
077E  1303     BCF STATUS, 0x6
077F  1B11     BTFSC TMR2, 0x6
0780  2F92     GOTO 0x792
                                                  225:   
0781  1283     BCF STATUS, 0x5                    226:   		banksel	0x70
0782  1303     BCF STATUS, 0x6
0783  0870     MOVF 0x70, W                       227:   		movf	0x70, W
0784  1283     BCF STATUS, 0x5                    228:           i2c_common_write
0785  1303     BCF STATUS, 0x6
0786  0093     MOVWF SSPBUF
0787  1683     BSF STATUS, 0x5
0788  1303     BCF STATUS, 0x6
0789  1914     BTFSC SSPCON, 0x2
078A  2F89     GOTO 0x789
078B  1683     BSF STATUS, 0x5
078C  1303     BCF STATUS, 0x6
078D  1683     BSF STATUS, 0x5                    229:           i2c_common_check_ack   W_END
078E  1303     BCF STATUS, 0x6
078F  1B11     BTFSC TMR2, 0x6
0790  2F92     GOTO 0x792
0791  2F92     GOTO 0x792                         230:           goto        W_END
                                                  231:   W_END
0792  1683     BSF STATUS, 0x5                    232:   		i2c_common_stop	;Release the I2C bus
0793  1303     BCF STATUS, 0x6
0794  1511     BSF TMR2, 0x2
0795  1911     BTFSC TMR2, 0x2
0796  2F95     GOTO 0x795
0797  0008     RETURN                             233:           return
                                                  234:   
                                                  235:   
                                                  236:   p2p_read
                                                  237:           ;Select the DS1307 on the bus, in WRITE mode
0798  1683     BSF STATUS, 0x5                    238:           i2c_common_start
0799  1303     BCF STATUS, 0x6
079A  1411     BSF TMR2, 0x0
079B  1811     BTFSC TMR2, 0x0
079C  2F9B     GOTO 0x79B
079D  3011     MOVLW 0x11                         239:   		movlw       b'00010001'
079E  1283     BCF STATUS, 0x5                    240:           i2c_common_write
079F  1303     BCF STATUS, 0x6
07A0  0093     MOVWF SSPBUF
07A1  1683     BSF STATUS, 0x5
07A2  1303     BCF STATUS, 0x6
07A3  1914     BTFSC SSPCON, 0x2
07A4  2FA3     GOTO 0x7A3
07A5  1683     BSF STATUS, 0x5
07A6  1303     BCF STATUS, 0x6
07A7  1683     BSF STATUS, 0x5                    241:   		i2c_common_check_ack   R_END
07A8  1303     BCF STATUS, 0x6
07A9  1B11     BTFSC TMR2, 0x6
07AA  2FBC     GOTO 0x7BC
                                                  242:   
07AB  1683     BSF STATUS, 0x5                    243:           i2c_common_read
07AC  1303     BCF STATUS, 0x6
07AD  1591     BSF TMR2, 0x3
07AE  1991     BTFSC TMR2, 0x3
07AF  2FAE     GOTO 0x7AE
07B0  1283     BCF STATUS, 0x5
07B1  1303     BCF STATUS, 0x6
07B2  0813     MOVF SSPBUF, W
07B3  1283     BCF STATUS, 0x5                    244:   		banksel		0x70
07B4  1303     BCF STATUS, 0x6
07B5  00F0     MOVWF 0x70                         245:           movwf       0x70
07B6  1683     BSF STATUS, 0x5                    246:           i2c_common_nack      ;Send acknowledgement of data reception
07B7  1303     BCF STATUS, 0x6
07B8  1691     BSF TMR2, 0x5
07B9  1611     BSF TMR2, 0x4
07BA  1A11     BTFSC TMR2, 0x4
07BB  2FBA     GOTO 0x7BA
                                                  247:   R_END
07BC  1683     BSF STATUS, 0x5                    248:   		i2c_common_stop
07BD  1303     BCF STATUS, 0x6
07BE  1511     BSF TMR2, 0x2
07BF  1911     BTFSC TMR2, 0x2
07C0  2FBF     GOTO 0x7BF
07C1  0008     RETURN                             249:           return
                                                  250:   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                                  251:   
                                                  252:           end
                                                  253:   
                                                  254:   
